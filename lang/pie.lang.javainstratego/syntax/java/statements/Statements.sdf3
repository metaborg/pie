module java/statements/Statements

// 14.5. Statements

imports
  java/classes/FieldDeclarations
  java/classes/MethodDeclarations
  java/lexical/Identifiers
  java/statements/Blocks
  java/names/Names
  java/types/ReferenceTypes
  java/expressions/Main

context-free syntax

  Statement.Labeled = <<Id> : <Statement>>

  Statement.If      = <if(<Expression>) <Statement>>
  Statement.IfElse  = <if(<Expression>) <Statement> else <Statement>>
  
  Statement.While = <while(<Expression>) <Statement>>
  
  Statement.For     = <for(<ForInit>; <Expression?>; <ForUpdate>) <Statement>>
  Statement.ForEach = <for(<{VariableModifier " "}*> <UnannType> <VarDeclId> : <Expression>) <Statement>>
  
  ForInit.ExprList = <<{Expression ", "}*>>
  ForInit.VarDecls = <<{VariableModifier " "}*> <UnannType> <{VarDecl ", "}+>>
  
  ForUpdate.ExprList = <<{Expression ", "}*>>
  
  Statement = Block
  
  Statement.Empty = ";"
  
  Statement.ExpressionStatement = <<Expression>;>
  
  Statement = ExpressionName "<" ExpressionName ">" Expression ";" {reject}
  Statement = ExpressionName "<" ExpressionName "<" ExpressionName ">>" Expression ";" {reject} 
  Statement = ExpressionName "<" ExpressionName "<" ExpressionName "<" ExpressionName ">>>" Expression ";" {reject} 
  
  Statement.Assert = <assert <Expression>;>
  Statement.Assert = <assert <Expression> : <Expression>;>
  
  Statement.Switch = <
  switch(<Expression>) {
    <{SwitchGroup "\n"}*>
    <{SwitchLabel "\n"}*>
  }>
  
  SwitchGroup.SwitchGroup = <
  <{SwitchLabel "\n"}+>
  <{BlockStatement "\n"}+>
  >
  
  SwitchLabel.CaseExpr     = <case <Expression> :>
//  SwitchLabel.CaseEnumName = <case <Id> :>
  SwitchLabel.Default      = <default :>
  
  Statement.DoWhile = <
  do <Statement>
  while(<Expression>);>
  
  Statement.Break = <break;>
  Statement.Break = <break <Id>;>
  
  Statement.Continue = <continue;>
  Statement.Continue = <continue <Id>;>
  
  Statement.Return = <return;>
  Statement.Return = <return <Expression>;>
  
  Statement.Synchronized = <synchronized(<Expression>) <Block>>
  
  Statement.Throw = <throw <Expression>;>
  
  Statement.Try = <
  try <Block>
  <{CatchClause "\n"}+>>
  
  Statement.TryFinally = <
  try <Block>
  <{CatchClause "\n"}*>
  finally <Block>>
  
  CatchClause.Catch = <catch(<CatchFormalParameter>) <Block>>
  CatchFormalParameter.CatchParam = <<{VariableModifier " "}*> <CatchType> <VarDeclId>>
  CatchType.CatchType = <<UnannClassType> <{CatchTypeRest " "}*>>
  CatchTypeRest.CatchTypeElem = <| <ClassType>>
  
  Statement.TryWithResources = <
  try (<{Resource "; "}*>) <Block> 
  <{CatchClause "\n"}*>>
  
  Statement.TryWithResourcesSemiColon = <
  try (<{Resource "; "}*>;) <Block> 
  <{CatchClause "\n"}*>>
  
  Statement.TryWithResources = <
  try (<{Resource "; "}*>) <Block> 
  <{CatchClause "\n"}*>
  finally <Block>>
  
  Statement.TryWithResourcesSemiColon = <
  try (<{Resource "; "}*>;) <Block> 
  <{CatchClause "\n"}*>
  finally <Block>>
  
  Resource.Resource = <<{VariableModifier " "}*> <UnannType> <VarDeclId> = <Expression>>
    
template options
  tokenize : "(;"
    
// new SDF3 table generator
context-free priorities

  Statement.IfElse  > Statement.If