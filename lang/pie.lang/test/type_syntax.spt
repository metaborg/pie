module type_syntax
language pie
start symbol Type

// simple types
test unit [[ unit ]] parse to UnitTy()
test bool [[ bool ]] parse to BoolTy()
test boolean [[ boolean ]] parse to DataTy(NoModuleList(), "boolean", NoTypeArgs())
test int [[ int ]] parse to IntTy()
test string [[ string ]] parse to StrTy()
test path [[ path ]] parse to PathTy()

// data types
test data [[ Foo ]] parse to DataTy(NoModuleList(), "Foo", NoTypeArgs())
test data [[ Foo[string, Bar] ]] parse to DataTy(
    NoModuleList(),
    "Foo",
    TypeArgs(
      [ StrTy()
      , DataTy(NoModuleList(), "Bar", NoTypeArgs())
      ]
    )
  )
test imported data [[ example:othermod:Bar ]] parse to DataTy(ModuleList(["example", "othermod"]), "Bar", NoTypeArgs())
test imported data missing final name [[ example:othermod: ]] parse fails
test imported data missing first name [[ :othermod:Bar ]] parse fails
test imported data missing middle [[ example::Bar ]] parse fails
test imported data layout before colon [[ example :othermod:Bar ]] parse succeeds
test imported data layout after colon [[ example:othermod: Bar ]] parse succeeds
test imported data layout in name [[ example:other mod:Bar ]] parse fails

// tuple types
test tuple empty [[ () ]] parse fails
test tuple asterisk as separator [[ (string * int) ]] parse fails
test tuple asterisk as separator no brackets [[ string * int ]] parse fails
test tuple missing brackets [[ string, int ]] parse fails
test tuple missing open bracket [[ string, int) ]] parse fails
test tuple missing closing bracket [[ (path, string ]] parse fails
test tuple single element parsed as brackets simple [[ (int) ]] parse to IntTy()
test tuple single element parsed as brackets data [[ (Fuz[path]) ]] parse to DataTy(NoModuleList(), "Fuz", TypeArgs([PathTy()]))
test tuple single element parsed as brackets imported data [[ (example:Bak) ]] parse to DataTy(ModuleList(["example"]), "Bak", NoTypeArgs())
test tuple two elements [[ (string, path) ]] parse succeeds
test tuple three elements [[ (string, path, Foo) ]] parse succeeds
test tuple two elements composite [[ (string?, path*) ]] parse succeeds
test tuple nested [[ (path, (string, type)) ]] parse succeeds

// list types
test list simple type [[ bool* ]] parse to ListTy(BoolTy())
test list square brackets [[ bool[] ]] parse fails
test list brackets around [[ [bool] ]] parse fails
test list data type [[ Bar* ]] parse to ListTy(DataTy(NoModuleList(), "Bar", NoTypeArgs()))
test list nullable type [[ string?* ]] parse to ListTy(NullableTy(StrTy(), NullableMarker()))
test list nested [[ int** ]] parse to ListTy(ListTy(IntTy()))
test list of pairs [[ (string, bool)* ]] parse to ListTy(TupleTy([StrTy(), BoolTy()]))

// supplier types
test supplier simple type [[ supplier[path] ]] parse to SupplierTy(PathTy())
test supplier layout after keyword [[ supplier [path] ]] parse succeeds
test supplier layout within keyword [[ suppl ier[path] ]] parse fails
test supplier layout after open square bracket [[ supplier[ path] ]] parse succeeds
test supplier layout before close square bracket [[ supplier[path ] ]] parse succeeds
test supplier missing brackets [[ supplier path ]] parse fails
test supplier missing brackets no layout [[ supplierpath ]] parse to DataTy(NoModuleList(), "supplierpath", NoTypeArgs())
test supplier missing brackets [[ supplier path ]] parse fails
test supplier missing open bracket [[ supplier path] ]] parse fails
test supplier missing open bracket no layout [[ supplierpath] ]] parse fails
test supplier missing close bracket [[ supplier[path ]] parse fails
test supplier data type [[ supplier[Bar] ]] parse to SupplierTy(DataTy(NoModuleList(), "Bar", NoTypeArgs()))
test supplier nullable type [[ supplier[string?] ]] parse to SupplierTy(NullableTy(StrTy(), NullableMarker()))
test supplier nested [[[ supplier[supplier[int]] ]]] parse to SupplierTy(SupplierTy(IntTy()))
test supplier of pairs [[ supplier[(string, bool)] ]] parse to SupplierTy(TupleTy([StrTy(), BoolTy()]))

// nullable
test nullable simple [[ string? ]] parse to NullableTy(StrTy(), NullableMarker())
test nullable double [[ string?? ]] parse succeeds // allowed for parsing, gives warning with static analysis
test nullable data type [[ Foo? ]] parse to NullableTy(DataTy(NoModuleList(), "Foo", NoTypeArgs()), NullableMarker())
test nullable imported data type [[ example:othermod:Foo? ]] parse to NullableTy(DataTy(ModuleList(["example", "othermod"]), "Foo", NoTypeArgs()), NullableMarker())
test nullable list [[ bool*? ]] parse to NullableTy(ListTy(BoolTy()), NullableMarker())
test nullable list of nullable [[ int?*? ]] parse to NullableTy(ListTy(NullableTy(IntTy(), NullableMarker())), NullableMarker())
test nullable in tuple [[ (path, string?) ]] parse to TupleTy([PathTy(), NullableTy(StrTy(), NullableMarker())])
test nullable in supplier [[ supplier[Thing?] ]] parse to SupplierTy(NullableTy(DataTy(NoModuleList(), "Thing", NoTypeArgs()), NullableMarker()))

// wildcards
test wildcard boundless [[ _ ]] parse to Wildcard(UnboundedWildcard())
test wildcard upperbound [[ _ <: T ]] parse to Wildcard(UpperBoundedWildcard(DataTy(_, "T", _)))
test wildcard lowerbound [[ _ :> T ]] parse to Wildcard(LowerBoundedWildcard(DataTy(_, "T", _)))
test wildcard nested [[ Pair[Apple, _ <: Fruit]*  ]] parse succeeds
test wildcard nullable [[ _ <: T? ]] parse to Wildcard(UpperBoundedWildcard(NullableTy(_, _)))
test wildcard list [[ _ <: T* ]] parse to Wildcard(UpperBoundedWildcard(ListTy(_)))
