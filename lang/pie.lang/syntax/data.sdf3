module data

imports

  lex/literal
  func_def
  type
  common

template options

  keyword -/- [a-zA-Z0-9\-\_]

context-free sorts

  DataDef
  DataDefMod
  DataDefMods
  SuperType
  DataImpl
  JavaDataMemb

context-free syntax // Data definition

  DataDef.DataDef = <<DataDefMods> data <TYPEID><TypeParams><SuperType> = <DataImpl>>

  DataDefMod.Transient = <transient>
  DataDefMods.DataDefMods = <<{DataDefMod " "}*>>

  SuperType.NoSuperType = []
  SuperType.SuperType = [ <: [DataTy]]

context-free syntax // Java foreign data definition

  DataImpl.JavaDataImpl = <foreign java <JAVAQTYPEID> {
  <{JavaDataMemb "\n"}*>
}>
  JavaDataMemb.JavaFuncDef = <func <FuncHead>>

lexical syntax // Reject keywords

  TYPEID = "unit"     {reject}
  TYPEID = "bool"     {reject}
  TYPEID = "int"      {reject}
  TYPEID = "string"   {reject}
  TYPEID = "path"     {reject}
  TYPEID = "supplier" {reject}
