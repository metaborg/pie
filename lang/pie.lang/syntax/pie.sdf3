module pie

imports

  lex/literal
  lex/layout
  lex/comment
  type
  data
  common
  func_def
  func_body

template options

  keyword -/- [a-zA-Z0-9\-\_]

context-free sorts

  Start
  ModuleStmt
  Module
  ImportStmt
  ImportListElement
  ImportSubModule
  SubModule
  ImportFinalElement
  ImportFinalSubModule
  FinalSubModule
  Def

context-free start-symbols

  Start

  // for testing grammar
  Exp
  DataDef
  Type
  ImportStmt
  FuncImpl

context-free syntax

  Start.Program =
  <<ModuleStmt>

  <{ImportStmt "\n"}*>

  <{Def "\n"}*>>

  // Module statement
  ModuleStmt.ModuleStmt = <module <Module>>
  Module.Module = <<ModuleList><MODID>> // split up to give error on name only

  // Imports
  ImportStmt.ImportStmt = <import <{ImportListElement ":"}+>:<ImportFinalElement>>

  ImportListElement.SingleElement = <<MODID>>
  ImportListElement.MultiElement = <{<{ImportSubModule ", "}*>}>

  ImportSubModule.NoRename = <<SubModule>>
  ImportSubModule.Rename = <<SubModule> as <SubModule>>

  SubModule.SubModule = <<{MODID ":"}+>>


  ImportFinalElement.SingleFinalElement = <<ANYID>>
  ImportFinalElement.SingleFinalRename = <<ANYID> as <FinalSubModule>>
  ImportFinalElement.MultiFinalElement = <{<{ImportFinalSubModule ", "}*>}>

  ImportFinalSubModule.FinalNoRename = <<FinalSubModule>>
  ImportFinalSubModule.FinalRename = <<FinalSubModule> as <FinalSubModule>>

  FinalSubModule.SingleName = <<ANYID>>
  FinalSubModule.FinalSubModule = <<{MODID ":"}+>:<ANYID>>

  // Definitions
  Def = DataDef
  Def = FuncDef
