module mb:pie:example:spoofax_old

/// Interface that Spoofax expects from a language
data Message = foreign java mb.spoofax.api.message.Msg {}
data PathMessage : Message = foreign java mb.spoofax.api.message.PathMsg {}
func toMessage(pathMessage : PathMessage) -> Message = { pathMessage } // HACK: function that does nothing to cast from PathMessage to Message
data Ast = foreign java org.spoofax.interpreter.terms.IStrategoTerm {}
data Token = foreign java mb.spoofax.api.parse.Token {}

data Styling = foreign java mb.spoofax.api.style.Styling {}



/// Library with functions to build and use language specifications.
/// Runtime
// Style
data StylingRules = foreign java mb.spoofax.runtime.style.StylingRules {}
func spoofax-style(tokenStream: Token*, st: StylingRules) -> Styling = foreign mb.spoofax.pie.style.SpoofaxStyle
// JSGLR
data ParseTable = foreign java mb.spoofax.runtime.jsglr.Table {}
func jsglr-parse(text: string, table: ParseTable, file: path, langSpecExt: string, root: path) -> (Ast?, Token*?, Message*) = foreign mb.spoofax.pie.jsglr.JSGLRParse
// Constraint generator
data CGen = foreign java mb.spoofax.runtime.constraint.CGen {}
data GlobalConstraints = foreign java mb.nabl2.spoofax.analysis.ImmutableInitialResult {}
func cgen-global(langSpecExt: string, root: path) -> GlobalConstraints? = foreign mb.spoofax.pie.constraint.CGenGlobal
data DocumentConstraints = foreign java mb.nabl2.spoofax.analysis.ImmutableUnitResult {}
func cgen-document(globalConstraints: GlobalConstraints, ast: Ast, file: path, langSpecExt: string, root: path) -> DocumentConstraints? = foreign mb.spoofax.pie.constraint.CGenDocument
// Constraint solver
data SolverSolution = foreign java mb.nabl2.solver.ImmutableSolution {}
func csolve-global(globalConstraints: GlobalConstraints) -> SolverSolution? = foreign mb.spoofax.pie.constraint.CSolveGlobal
func csolve-document(documentConstraints: DocumentConstraints, globalConstraints: GlobalConstraints, globalSolution: SolverSolution) -> SolverSolution? = foreign mb.spoofax.pie.constraint.CSolveDocument
data FinalSolverSolution = foreign java mb.spoofax.runtime.constraint.CSolution {}
func csolve-final(documentsConstraints: SolverSolution*, globalSolution: SolverSolution, projectPath: path) -> FinalSolverSolution? = foreign mb.spoofax.pie.constraint.CSolveFinal

/// Meta-languages
// SDF3
func sdf3-to-jsglr-parse-table(langSpecExt: string, root: path) -> ParseTable? = foreign mb.spoofax.pie.sdf3.SDF3ToJSGLRParseTable
data Signatures = foreign java mb.spoofax.runtime.sdf3.Signatures {}
func sdf3-to-stratego-signatures(langSpecExt: string, root: path) -> Signatures? = foreign mb.spoofax.pie.sdf3.SDF3ToStrategoSignatures
// ESV
func esv-to-styling-rules(langSpecExt: string, root: path) -> StylingRules? = foreign mb.spoofax.pie.esv.ESVToStylingRules
// NaBL2
func nabl2-compile-cgen(langSpecExt: string, root: path) -> CGen? = foreign mb.spoofax.pie.nabl2.CompileCGen



/// Language specification configuration
data StrategoConfig = foreign java mb.spoofax.runtime.cfg.ImmutableStrategoConfig {}
data LangSpecConfig = foreign java mb.spoofax.runtime.cfg.LangSpecConfig {
  func dir() -> path

  func extensions() -> string*
  func firstExtension() -> string // HACK: there may be 0..* extensions
  func name() -> string?

  func syntaxParseFiles() -> path*
  func syntaxParseMainFile() -> path?
  func syntaxParseStartSymbolId() -> string?
  func syntaxSignatureFiles() -> path*
  func syntaxStyleFile() -> path?

  func natsNaBL2Files() -> path*
  func natsStrategoConfig() -> StrategoConfig?
  func natsStrategoStrategyId() -> string?
  func natsRootScopePerFile() -> bool
}

/// Spoofax Core configuration
data SpxCoreConfig = foreign java mb.spoofax.runtime.cfg.SpxCoreConfig {}
func createSpxCoreConfig(langDir: path, isLangSpec: bool, extensions: string*) -> SpxCoreConfig = foreign java mb.spoofax.runtime.cfg.ImmutableSpxCoreConfig#of

/// Combined configuration for the entire workspace
data WorkspaceConfig = foreign java mb.spoofax.runtime.cfg.WorkspaceConfig {
  func langSpecConfigs() -> LangSpecConfig*
  func spxCoreConfigs() -> SpxCoreConfig*

  func extensions() -> string*
  func langSpecExtensions() -> string*
  func spxCoreExtensions() -> string*

  func langSpecConfigForExt(extension: string) -> LangSpecConfig?
  func spxCoreConfigForExt(extension: string) -> SpxCoreConfig?
}
func langSpecConfigForPath(path: path, root: path) -> LangSpecConfig? = {
  val workspace = createWorkspaceConfig(root);
  if(workspace == null) { return null };
  val extension = path.extension();
  if(extension == null) { return null };
  workspace!.langSpecConfigForExt(extension!)
}
func spxCoreConfigForPath(workspace: WorkspaceConfig, path: path) -> SpxCoreConfig? = {
  val extension = path.extension();
  if(extension == null) return null;
  workspace.spxCoreConfigForExt(extension!)
}
func generateWorkspaceConfig(text: string, file: path, workspaceRoot: path, cfgLangConfig: SpxCoreConfig) -> WorkspaceConfig? = foreign mb.spoofax.pie.config.ParseWorkspaceCfg
func createWorkspaceConfig(workspaceRoot: path) -> WorkspaceConfig? = {
  // Manually create a config for the configuration language. This is required to bootstrap the language workbench.
  val cfgLang = createSpxCoreConfig(/Users/gohla/metaborg/repo/pie/spoofax-pie/lang/cfg/langspec, false, ["cfg"]);
  val workspaceFile = workspaceRoot.resolve("root/workspace.cfg");
  if(!exists workspaceFile) return null;
  val text = (read workspaceFile)!; // Can assume not null because workspaceFile exists
  val workspaceConfig = generateWorkspaceConfig(text, workspaceFile, workspaceRoot, cfgLang);
  workspaceConfig
}



// Processing
/// Process the entire workspace.
func processWorkspace(root: path) -> ((path, Token*?, Message*, Styling?, FinalSolverSolution?)**, (path, Token*?, Message*, Styling?)*)* = {
  [processProject(project, root) | project <- list root with regex "^[^.]((?!src-gen).)*\$"]
}
/// Processing a project in the workspace.
func processProject(project: path, root: path) -> ((path, Token*?, Message*, Styling?, FinalSolverSolution?)**, (path, Token*?, Message*, Styling?)*) = {
  val workspaceConfig = createWorkspaceConfig(root);
  val noLangSpecResults: (path, Token*?, Message*, Styling?, FinalSolverSolution?)** = [];
  val noSpxCoreResults: (path, Token*?, Message*, Styling?)* = [];
  if(workspaceConfig == null) return (noLangSpecResults, noSpxCoreResults);
  val workspace = workspaceConfig!;

  val langSpecResults = [processLangSpecInProject(project, langSpec, root) | langSpec <- workspace.langSpecConfigs()];
  val spxCoreResults = [processFileWithSpxCore(file, project, workspace) | file <- walk project with extensions (workspace.spxCoreExtensions())];
  (langSpecResults, spxCoreResults)
}
func processLangSpecInProject(project: path, langSpec: LangSpecConfig, root: path) -> (path, Token*?, Message*, Styling?, FinalSolverSolution?)* = {
  [processFile(file, project, root) | file <- walk project with extensions (langSpec.extensions())]
//  val partialSolutions = filterNullPartialSolutions([extractPartialSolution(result) | result <- results]);
//  val solutions =
//    if(langSpec.natsRootScopePerFile())
//      [solve([partialSolution], project, langSpec.firstExtension(), root) | partialSolution <- partialSolutions]
//    else
//      [solve(partialSolutions, project, langSpec.firstExtension(), root)]
//    ;
//  (results, solutions)
}



/// Processing an editor in the workspace.
func processEditor(text: string, file: path, project: path, root: path) -> (Token*?, Message*, Styling?, FinalSolverSolution?)? = {
  val workspaceConfig = createWorkspaceConfig(root);
  if(workspaceConfig == null) return null;
  val workspace = workspaceConfig!;

  val extension = file.extension();
  if(extension == null) return null;

  val langSpecConfig = workspace.langSpecConfigForExt(extension!);
  if(langSpecConfig != null) {
    val langSpec = langSpecConfig!;
    val (tokens, messages, styling, solution) = processString(text, file, project, root);
    //val otherPartialSolutions = getOtherPartialSolutions(file, project, langSpec, root);
    //val partialSolutions = filterNullPartialSolutions([partialSolution] + otherPartialSolutions);
    //val solution: SolverSolution? = if(partialSolution == null) null else solve(partialSolutions, project, extension!, root);
    return (tokens, messages, styling, solution)
  };
  val spxCoreConfig = workspace.spxCoreConfigForExt(extension!);
  if(spxCoreConfig != null) {
    val (tokens, messages, styling) = processStringWithSpxCore(text, file, spxCoreConfig!);
    val noSolution: FinalSolverSolution? = null;
    return (tokens, messages, styling, noSolution)?
  };
  // No config found for file, do not process file, but this does register a dependency.
  null
} @ file

/// Partial solution utility functions
//func getOtherPartialSolutions(fileToIgnore: path, project: path, langSpec: LangSpecConfig, root: path) -> PartialSolverSolution?* = {
//  val projectResults = [processFile(file, project, root) | file <- walk project with extensions (langSpec.extensions())];
//  val partialSolutions = [extractOrRemovePartialSolution(fileToIgnore, result) | result <- projectResults];
//  partialSolutions
//}
//func extractPartialSolution(result: (path, Token*?, Message*, Styling?, PartialSolverSolution?)) -> PartialSolverSolution? = foreign java mb.spoofax.pie.builder#extractPartialSolution
//func extractOrRemovePartialSolution(fileToIgnore: path, result: (path, Token*?, Message*, Styling?, PartialSolverSolution?)) -> PartialSolverSolution? = foreign java mb.spoofax.pie.builder#extractOrRemovePartialSolution
//func filterNullPartialSolutions(partialSolutions: PartialSolverSolution?*) -> PartialSolverSolution* = foreign java mb.spoofax.pie.builder#filterNullPartialSolutions


/// Processing of programs of language specifications
func shouldProcessFile(file: path) -> bool = foreign java mb.spoofax.pie#shouldProcessFile
func processFile(file: path, project: path, root: path) -> (path, Token*?, Message*, Styling?, FinalSolverSolution?) = {
  if(!shouldProcessFile(file)) {
    return emptyFileResult(file)
  };
  if(!exists file) { // Creates a dependency to file existance changes
    return emptyFileResult(file)
  };
  val langSpec = langSpecConfigForPath(file, root);
  if(langSpec != null) {
    val text = (read file)!; // Creates a dependency to file contents changes. Can assume not null because the file exists
    val (tokens, messages, styling, solution) = processString(text, file, project, root);
    (file, tokens, messages, styling, solution)
  } else {
    emptyFileResult(file)
  }
} @ file
func emptyFileResult(file: path) -> (path, Token*?, Message*, Styling?, FinalSolverSolution?) = {
  val emptyTokens: Token*? = null;
  val emptyMessages: Message* = [];
  val emptyStyling: Styling? = null;
  val emptySolution: FinalSolverSolution? = null;
  (file, emptyTokens, emptyMessages, emptyStyling, emptySolution)
}

func processString(text: string, file: path, project: path, root: path) -> (Token*?, Message*, Styling?, FinalSolverSolution?) = {
  val langSpecExt = file.extension();
  if(langSpecExt != null) {
    val (ast, tokenStream, messages) = parse(text, file, langSpecExt!, root);
    val styling : Styling? = if(tokenStream == null) null else style(tokenStream!, langSpecExt!, root);
    val solution: FinalSolverSolution? = if(ast == null) null else solveFile(ast!, file, project, langSpecExt!, root);
    (tokenStream, messages, styling, solution)
  } else {
    emptyResult()
  }
} @ file
func emptyResult() -> (Token*?, Message*, Styling?, FinalSolverSolution?) = {
  val emptyTokens: Token*? = null;
  val emptyMessages: Message* = [];
  val emptyStyling: Styling? = null;
  val emptySolution: FinalSolverSolution? = null;
  (emptyTokens, emptyMessages, emptyStyling, emptySolution)
}


/// Parsing
func parse(text: string, file: path, langSpecExt: string, root: path) -> (Ast?, Token*?, Message*) = {
  val parseTable = sdf3-to-jsglr-parse-table(langSpecExt, root);
  if(parseTable == null) return emptyParse();
  jsglr-parse(text, parseTable!, file, langSpecExt, root)
} @ file
func emptyParse() -> (Ast?, Token*?, Message*) = {
  val emptyAst: Ast? = null;
  val emptyTokens: Token*? = null;
  val emptyMessages: Message* = [];
  (emptyAst, emptyTokens, emptyMessages)
}

/// Signatures
func createSignatures(langSpecExt: string, root: path) -> Signatures? = {
  sdf3-to-stratego-signatures(langSpecExt, root)
}

/// Styling
func style(tokenStream: Token*, langSpecExt: string, root: path) -> Styling? = {
  val syntaxStyler = esv-to-styling-rules(langSpecExt, root);
  if(syntaxStyler == null) return null;
  spoofax-style(tokenStream, syntaxStyler!)?
}

/// Constraint solving
//func createConstraintGenerator(langSpecExt: string, root: path) -> ConstraintGenerator? = {
//  nabl2-constraint-generator(langSpecExt, root)
//}
func solveFile(ast: Ast, file: path, project: path, langSpecExt: string, root: path) -> FinalSolverSolution? = {
  //return null; // HACK: disable constraint solving until it works
  val globalConstraints = cgen-global(langSpecExt, root);
  if(globalConstraints == null) return null;
  val globalSolution = csolve-global(globalConstraints!);
  if(globalSolution == null) return null;
  val documentConstraints = cgen-document(globalConstraints!, ast, file, langSpecExt, root);
  if(documentConstraints == null) return null;
  val documentSolution = csolve-document(documentConstraints!, globalConstraints!, globalSolution!);
  if(documentSolution == null) return null;
  val solution = csolve-final([documentSolution!], globalSolution!, project);
  solution
} @ file
//func solve(partialSolutions: PartialSolverSolution*, project: path, langSpecExt: string, root: path) -> SolverSolution? = {
//  //return null; // HACK: disable constraint solving until it works
//  val initialResult = nabl2-initial-result(langSpecExt, root);
//  if(initialResult == null) return null;
//  val solution = csolve-final(initialResult!, partialSolutions, project);
//  solution?
//}


/// Legacy Spoofax interoperability
/// Native functions
// Parsing
func legacy-parse(file: path, text: string) -> (Ast?, Token*?, Message*, path) = foreign mb.spoofax.pie.legacy.LegacyParse
func legacy-parse-all(config: SpxCoreConfig, pairs: (path, string)*) -> (Ast?, Token*?, Message*, path)* = foreign mb.spoofax.pie.legacy.LegacyParseAll

//// Analysis
//func legacy-analyze(config: SpxCoreConfig, project: path, file: path, ast: Ast) -> (Ast?, Message*, path) = foreign mb.spoofax.pie.legacy.LegacyAnalyze
//func legacy-analyze-all(config: SpxCoreConfig, project: path, pairs: (Ast, path)*) -> (Ast?, Message*, path) = foreign mb.spoofax.pie.legacy.LegacyAnalyzeAll

//// Transformation
//data TransformGoal = foreign java org.metaborg.core.action.ITransformGoal {}
//func legacy-compile-goal() -> TransformGoal = foreign java mb.spoofax.pie.legacy#legacy-compile-goal
//func legacy-named-goal(name: string) -> TransformGoal = foreign java mb.spoofax.pie.legacy#legacy-compile-goal
//func legacy-transform(config: SpxCoreConfig, project: path, goal: TransformGoal, file: path, ast: Ast) -> (Ast?, path?, path) = foreign mb.spoofax.pie.legacy.LegacyTransform
//func legacy-transform-all(config: SpxCoreConfig, project: path, goal: TransformGoal, pairs: (Ast, path)*) -> (Ast?, path?, path) = foreign mb.spoofax.pie.legacy.LegacyTransformAll

// Styling
func legacy-style(config: SpxCoreConfig, tokens: Token*, ast: Ast) -> Styling = foreign mb.spoofax.pie.legacy.LegacyStyle


/// Interoperability functions
func processFileWithSpxCore(file: path, project: path, workspace: WorkspaceConfig) -> (path, Token*?, Message*, Styling?) = {
  if(!shouldProcessFile(file)) {
    return emptySpxCoreFile(file)
  };
  if(!exists file) { // Creates a dependency to file existance changes
    return emptySpxCoreFile(file)
  };
  val config = spxCoreConfigForPath(workspace, file);
  if(config != null) {
    val text = (read file)!; // Creates a dependency to file changes. Can assume not null because file exists
    val (tokens, messages, styling) = processStringWithSpxCore(text, file, config!);
    (file, tokens, messages, styling)
  } else {
    emptySpxCoreFile(file)
  }
} @ file
func emptySpxCoreFile(file: path) -> (path, Token*?, Message*, Styling?) = {
  val emptyTokens: Token*? = null;
  val emptyMessages: Message* = [];
  val emptyStyling: Styling? = null;
  (file, emptyTokens, emptyMessages, emptyStyling)
}
func processStringWithSpxCore(text: string, file: path, config: SpxCoreConfig) -> (Token*?, Message*, Styling?) = {
  val (ast, tokens, messages, _) = legacy-parse(file, text);
  val styling: Styling? = if(ast == null || tokens == null) null else (legacy-style(config, tokens!, ast!)?);
  (tokens, messages, styling)
} @ file
