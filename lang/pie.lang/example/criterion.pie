module mb:pie:example:criterion

func main_benchmarking(dummy: string*) -> path** = {
  val benchmarkJar = build();

  val pkg = "io.usethesource.criterion";
  val javaSrcDir = ./src/main/java/io/usethesource/criterion;
  val benchmarks : (string, string, path*)* = [
    ("set"             , "$pkg.JmhSetBenchmarks.(timeContainsKey|timeContainsKeyNotContained|timeInsert|timeInsertContained|timeRemoveKey|timeRemoveKeyNotContained|timeIteration|timeEqualsRealDuplicate|timeEqualsDeltaDuplicate)\$", [javaSrcDir + "/JmhSetBenchmarks.java"])
  , ("map"             , "$pkg.JmhMapBenchmarks.(timeContainsKey|timeContainsKeyNotContained|timeInsert|timeInsertContained|timeRemoveKey|timeRemoveKeyNotContained|timeIteration|timeEntryIteration|timeEqualsRealDuplicate|timeEqualsDeltaDuplicate)\$", [javaSrcDir + "/JmhMapBenchmarks.java"])
  , ("setmultimap"     , "$pkg.JmhSetMultimapBenchmarks.(timeMultimapLike.*)\$", [javaSrcDir + "/JmhSetMultimapBenchmarks.java"])
  , ("mapvssetmultimap", "$pkg.JmhSetMultimapBenchmarks.(timeMapLike.*)\$", [javaSrcDir + "/JmhSetMultimapBenchmarks.java"])
  ];

  val subjectJavaSrcDir  = javaSrcDir + "/impl/persistent";
  val subjectScalaSrcDir = ./src/main/scala/io/usethesource/criterion/impl/persistent/scala;
  val subjects: (string, string, path*)* = [
    ("clojure"     , "VF_CLOJURE"     , walk (subjectJavaSrcDir + "clojure")      + ./lib/clojure.jar     )
  , ("champ"       , "VF_CHAMP"       , walk (subjectJavaSrcDir + "champ")        + ./lib/champ.jar       )
  , ("scala"       , "VF_SCALA"       , walk subjectScalaSrcDir                   + ./lib/scala.jar       )
  , ("javaslang"   , "VF_JAVASLANG"   , walk (subjectJavaSrcDir + "javaslang")    + ./lib/javaslang.jar   )
  , ("unclejim"    , "VF_UNCLEJIM"    , walk (subjectJavaSrcDir + "unclejim")     + ./lib/unclejim.jar    )
  , ("dexx"        , "VF_DEXX"        , walk (subjectJavaSrcDir + "dexx")         + ./lib/dexx.jar        )
  , ("pcollections", "VF_PCOLLECTIONS", walk (subjectJavaSrcDir + "pcollections") + ./lib/pcollections.jar)
  ];

  val jvmArgs = ["-Xms4G", "-Xmx4G", "-XX:-TieredCompilation", "-XX:+UseCompressedOops"];
  val jmhArgs = ["-wi", "1", "-i", "1", "-r", "1", "-f", "0", "-gc", "true", "-v", "NORMAL", "-foe", "true", "-p", "producer=PURE_INTEGER", "-p", "sampleDataSelection=MATCH", "-p", "size=16"];

  [[run_benchmark(benchmarkJar, jvmArgs, jmhArgs, benchmark, subject) | benchmark <- benchmarks] | subject <- subjects]
}

func build() -> path = {
  val pomFile = ./pom.xml;
  requires pomFile;
  [requires file | file <- walk ./src with extensions ["java", "scala"]];
  exec(["mvn", "verify", "-f", "$pomFile"]);
  val benchmarkJar = ./target/benchmarks.jar;
  generates benchmarkJar;
  benchmarkJar
}

func run_benchmark(jar: path, jvmArgs: string*, jmhArgs: string*, benchmark: (string, string, path*), subject: (string, string, path*)) -> path = {
  val (benchmarkName, benchmarkPattern, benchmarkDeps) = benchmark;
  [requires dep | dep <- benchmarkDeps];
  val (subjectName, subjectId, subjectDeps) = subject;
  [requires dep | dep <- subjectDeps];
  val csv = ./results/${benchmarkName}_${subjectName}.csv;
  requires jar;
  exec(["java"] + jvmArgs + ["-jar", "$jar"] + benchmarkPattern + ["-p", "valueFactoryFactory=$subjectId"] + jmhArgs + ["-rff", "$csv"]);
  generates csv;
  csv
}

func exec(arguments: string*) -> (string, string) = foreign java pie#execute
