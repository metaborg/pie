module mb:pie:example:spoofax

/// Interface that Spoofax expects from a language
data Message = foreign java mb.spoofax.api.message.Message {}
data Ast = foreign java org.spoofax.interpreter.terms.IStrategoTerm {}
data Token = foreign java mb.spoofax.api.parse.Token {}
data Styling = foreign java mb.spoofax.api.style.Styling {}

data LangId = foreign java mb.spoofax.runtime.cfg.LangId {}

data WorkspaceResult = foreign java mb.spoofax.pie.processing.WorkspaceResult {}
func createWorkspaceResult(root: path, containerResults: ContainerResult*) -> WorkspaceResult = foreign java mb.spoofax.pie.processing#createWorkspaceResult
data ContainerResult = foreign java mb.spoofax.pie.processing.ContainerResult {}
func createContainerResult(root: path, langSpecResults: DocumentResult*, legacyResults: DocumentResult*) -> ContainerResult = foreign java mb.spoofax.pie.processing#createContainerResult
data DocumentResult = foreign java mb.spoofax.pie.processing.DocumentResult {}
func createDocumentResult(document: path, messages: Message*, tokens: Token*?, ast: Ast?, styling: Styling?, analysis: FinalAnalysis?) -> DocumentResult = foreign java mb.spoofax.pie.processing#createDocumentResult
func emptyDocumentResult(document: path) -> DocumentResult = foreign java mb.spoofax.pie.processing#emptyDocumentResult



/// Library with functions to build and use language specifications.
/// Meta-languages
// SDF3
func sdf3-to-jsglr-parse-table(langId: LangId, root: path) -> ParseTable? = foreign mb.spoofax.pie.sdf3.SDF3ToJSGLRParseTable
data Signatures = foreign java mb.spoofax.runtime.sdf3.Signatures {}
func sdf3-to-stratego-signatures(langId: LangId, root: path) -> Signatures? = foreign mb.spoofax.pie.sdf3.SDF3ToStrategoSignatures
// ESV
func esv-to-styling-rules(langId: LangId, root: path) -> StylingRules? = foreign mb.spoofax.pie.esv.ESVToStylingRules



/// Runtime
// JSGLR
data ParseTable = foreign java mb.spoofax.runtime.jsglr.Table {}
func jsglr-parse(document: path, langId: LangId, root: path, text: string, table: ParseTable) -> (Ast?, Token*?, Message*) = foreign mb.spoofax.pie.jsglr.JSGLRParse
// Style
data StylingRules = foreign java mb.spoofax.runtime.style.StylingRules {}
func spoofax-style(tokens: Token*, rules: StylingRules) -> Styling = foreign mb.spoofax.pie.style.SpoofaxStyle
// Analysis
data Analyzer = foreign java mb.spoofax.runtime.analysis.Analyzer {}
data ContainerAnalysis = foreign java mb.spoofax.runtime.analysis.Analyzer.ContainerOutput {}
data DocumentAnalysis = foreign java mb.spoofax.runtime.analysis.Analyzer.DocumentOutput {}
data FinalAnalysis = foreign java mb.spoofax.runtime.analysis.Analyzer.FinalOutput {}
func compile-analyzer(langId: LangId, root: path) -> Analyzer? = foreign mb.spoofax.pie.analysis.CompileAnalyzer
func analyze-container(container: path, langId: LangId, root: path) -> ContainerAnalysis? = foreign mb.spoofax.pie.analysis.AnalyzeContainer
func analyze-document(document: path, langId: LangId, root: path, ast: Ast, containerAnalysis: ContainerAnalysis) -> DocumentAnalysis? = foreign mb.spoofax.pie.analysis.AnalyzeDocument
func analyze-final(langId: LangId, root: path, containerAnalysis: ContainerAnalysis, documentAnalyses: DocumentAnalysis*) -> FinalAnalysis? = foreign mb.spoofax.pie.analysis.AnalyzeFinal



/// Processing
// Foreign processing functions.
func shouldProcessDocument(document: path) -> bool = foreign java mb.spoofax.pie.processing#shouldProcessDocument
func langSpecExtensions(root: path) -> string* = foreign mb.spoofax.pie.processing.LangSpecExtensions
func isLangSpecDocument(document: path, root: path) -> bool = foreign mb.spoofax.pie.processing.IsLangSpecDocument
func langIdOfDocument(document: path, root: path) -> LangId = foreign mb.spoofax.pie.processing.LangIdOfDocument
func legacyExtensions() -> string* = foreign mb.spoofax.pie.processing.LegacyExtensions
func isLegacyDocument(document: path) -> bool = foreign mb.spoofax.pie.processing.IsLegacyDocument
// Process all containers in a workspace.
func processWorkspace(root: path) -> WorkspaceResult = {
  val containerResults = [processContainer(container, root) | container <- list root with regex "^[^.]((?!src-gen).)*\$"];
  createWorkspaceResult(root, containerResults)
} @ root
// Process all documents in a container.
func processContainer(container: path, root: path) -> ContainerResult = {
  val langSpecResults = [{
    if(!shouldProcessDocument(document)) {
      emptyDocumentResult(document)
    } else {
      processDocument(document, container, root)
    }
  } | document <- walk container with extensions langSpecExtensions(root)];
  val legacyResults = [{
    if(!shouldProcessDocument(document)) {
      emptyDocumentResult(document)
    } else {
      legacyProcessDocument(document, container, root)
    }
  } | document <- walk container with extensions legacyExtensions()];
  createContainerResult(container, langSpecResults, legacyResults)
} @ container
// Process an editor of the workspace.
func processDocumentWithText(document: path, container: path, root: path, text: string) -> DocumentResult = {
  if((!exists document) || !shouldProcessDocument(document)) {
    emptyDocumentResult(document)
  } else {
    if(isLangSpecDocument(document, root)) {
      processTextBuffer(document, container, root, text)
    } else {
      if(isLegacyDocument(document)) {
        legacyProcessTextBuffer(document, container, root, text)
      } else {
        emptyDocumentResult(document)
      }
    }
  }
} @ document
// Process a document.
func processDocument(document: path, container: path, root: path) -> DocumentResult = {
  val text = (read document)!;
  processTextBuffer(document, container, root, text)
} @ document
// Process a document, with a (modified) text buffer.
func processTextBuffer(document: path, container: path, root: path, text: string) -> DocumentResult = {
  val langId = langIdOfDocument(document, root);
  val (ast, tokens, messages) = parse(document, langId, root, text);
  val styling : Styling? = if(tokens == null) null else style(langId, root, tokens!);
  val finalAnalysis: FinalAnalysis? = if(ast == null) null else analyze(document, langId, container, root, ast!);
  createDocumentResult(document, messages, tokens, ast, styling, finalAnalysis)
} @ document



/// Parsing
func parse(document: path, langId: LangId, root: path, text: string) -> (Ast?, Token*?, Message*) = {
  val parseTable = sdf3-to-jsglr-parse-table(langId, root);
  if(parseTable == null) {
    val emptyAst: Ast? = null;
    val emptyTokens: Token*? = null;
    val emptyMessages: Message* = [];
    return (emptyAst, emptyTokens, emptyMessages)
  };
  jsglr-parse(document, langId, root, text, parseTable!)
} @ document
/// Styling
func style(langId: LangId, root: path, tokens: Token*) -> Styling? = {
  val syntaxStyler = esv-to-styling-rules(langId, root);
  if(syntaxStyler == null) return null;
  spoofax-style(tokens, syntaxStyler!)?
}
/// Analysis
func analyze(document: path, langId: LangId, container: path, root: path, ast: Ast) -> FinalAnalysis? = {
  val containerAnalysis = analyze-container(container, langId, root);
  if(containerAnalysis == null) return null;
  val documentAnalysis = analyze-document(document, langId, root, ast, containerAnalysis!);
  if(documentAnalysis == null) return null;
  val finalAnalysis = analyze-final(langId, root, containerAnalysis!, [documentAnalysis!]);
  finalAnalysis
} @ document



/// Legacy Spoofax interoperability
// Parsing
func legacy-parse(document: path, text: string) -> (Ast?, Token*?, Message*) = foreign mb.spoofax.pie.legacy.LegacyParse
// Styling
func legacy-style(document: path, tokens: Token*, ast: Ast) -> Styling = foreign mb.spoofax.pie.legacy.LegacyStyle
// Processing
func legacyProcessDocument(document: path, container: path, root: path) -> DocumentResult = {
  val text = (read document)!;
  legacyProcessTextBuffer(document, container, root, text)
} @ document
func legacyProcessTextBuffer(document: path, container: path, root: path, text: string) -> DocumentResult = {
  val (ast, tokens, messages) = legacy-parse(document, text);
  val styling: Styling? = if(ast == null || tokens == null) null else (legacy-style(document, tokens!, ast!)?);
  createDocumentResult(document, messages, tokens, ast, styling, null)
} @ document
