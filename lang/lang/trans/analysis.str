module analysis

imports

  statixruntime
  statix/api
  statix/runtime/-

  pp
  injections/-
  src-gen/pp/constructors-pp
  libspoofax/sdf/pp

  desugar
  gen/java/type
  gen/util

rules // Analysis

  // single-file analysis
//  editor-analyze = stx-editor-analyze(pre-analyze, post-analyze|"statics/project", "programOk")

  // see README.md for details on how to switch to multi-file analysis
  // multi-file analysis
  editor-analyze = stx-editor-analyze(pre-analyze, post-analyze|"statics/project", "projectOk", "programOk")

  pre-analyze  = desugar-all; explicate-injections-pie-Start
  post-analyze = implicate-injections-pie-Start; resugar-all

rules // Editor Services

  editor-resolve = stx-editor-resolve

  editor-hover = stx-editor-hover(pp-pie-string)

rules // Pretty-printing DataType(scope) and GenericParameter2TYPE

  prettyprint-pie-TYPE :
    t@DataType(_) -> [ H(
                      [SOpt(HS(), "0")]
                    , t1__'
                    )
                  ]
    with t1__' := <clean-layout-empty-symbols(
                   | ""
                   , FALSE()
                   , FALSE()
                   )
                   ; flatten-list> [S(<pp-Statix-ATerm> t)]

  is-pie-TYPE =
    ?DataType(_)

  pie-get-indent :
    (t@DataType(_), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"TYPE"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  pie-get-separator :
    (t@DataType(_), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"TYPE"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  pie-get-leading-ws :
    (t@DataType(_), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"TYPE"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-pie-TYPE :
    t@GenericParameter2TYPE(GenericParameter(_, name)) -> [ H(
                      [SOpt(HS(), "0")]
                    , t1__'
                    )
                  ]
    with t1__' := <clean-layout-empty-symbols(
                   | ""
                   , FALSE()
                   , FALSE()
                   )
                   ; flatten-list> [S($[generic parameter [name]])]

  is-pie-TYPE =
    ?GenericParameter2TYPE(_)

  pie-get-indent :
    (t@GenericParameter2TYPE(_), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"TYPE"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  pie-get-separator :
    (t@GenericParameter2TYPE(_), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"TYPE"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  pie-get-leading-ws :
    (t@GenericParameter2TYPE(_), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"TYPE"> sort
    with switch !index
           otherwise :
             ws := ""
         end

rules // Debugging

  // Prints the abstract syntax ATerm of a selection.
  debug-show-aterm: (selected, _, _, path, project-path) -> (filename, result)
    with filename := <guarantee-extension(|"aterm")> path
       ; result   := selected

  // Prints the desugared abstract syntax ATerm of a selection.
  debug-show-desugared: (selected, _, _, path, project-path) -> (filename, result)
    with filename := <guarantee-extension(|"desugared.aterm")> path
       ; result   := <desugar-all> selected

  // Prints the pre-analyzed abstract syntax ATerm of a selection.
  debug-show-pre-analyzed: (selected, _, _, path, project-path) -> (filename, result)
    with filename := <guarantee-extension(|"pre-analyzed.aterm")> path
       ; result   := <pre-analyze> selected

  // Prints the analyzed annotated abstract syntax ATerm of a selection.
  debug-show-analyzed: (selected, _, _, path, project-path) -> (filename, result)
    with filename := <guarantee-extension(|"analyzed.aterm")> path
       ; result   := selected

  debug-print-scopegraph:
    (_, _, _, path, project-path) -> (filename, result)
    where
      a := <stx--get-resource-analysis> path
    with
      filename := <guarantee-extension(|"scopegraph.aterm")> path
    ; sg := <stx--get-scopegraph; strip-annos> a
    ; result := sg

