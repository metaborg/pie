module gen/java/ast-util

imports

  src-gen/signatures/-
  signatures/metaborg-java-sig
  signatures/java/arrays/-
  signatures/java/classes/-
  signatures/java/interfaces/-
  signatures/java/lexical/-
  signatures/java/literals/-
  signatures/java/names/-
  signatures/java/packages/-
  signatures/java/statements/-
  signatures/java/types/-
  signatures/java/expressions/-

  gen/util

rules

  // add-import: str -> ast
  //   type: String -> Java AST
  // Convert the given import string into an import Java AST.
  // Add that import Java AST to dynamic rule JavaImports
  // returns the Java AST
  add-import: str -> ast
  with
    ast := <parse-import> str
  ; rules (JavaImports :+= ast)

  // parse-import: str -> result
  //   type: String -> Java AST
  // Convert the given import string into an import Java AST.
  parse-import: str -> result
  where
    <is-string> str
  with
    parts := <string-tokenize(|".")> str
  ; result := SingleTypeImport(TypeName(<parse-import-parts> <reverse> parts))

  parse-import-parts: [part | []] -> Id(part)
  parse-import-parts: [part | rest] -> PackageOrTypeName(<parse-import-parts> rest, part)

  p2j-ast-wrap-string-with-id: str -> Id(str)

  // java-classType-to-unnanType: removes the list of annotations from a ClassType
  java-classType-to-unannType: ClassType(_, name, types) -> ClassType(name, types)
  java-classType-to-unannType:
    ClassOrInterfaceTypeMember(toplevelclass, annotations, name, types) -> ClassOrInterfaceTypeMember(
      <java-classType-to-unannType> toplevelclass
    , annotations
    , name
    , types
    )
  java-classType-to-unannType: x -> x
    where
      <not(?ClassType(_, _, _)); not(?ClassOrInterfaceTypeMember(_, _, _, _))> x

  // java-qualifiedClass-to-expressionName: ids -> ast
  //   Type: list of ids -> ast
  // Converts a list of ids representing a qualified java class to a Java AST
  // representation of that qualified class name
  // Example:
  // ["mb", "pie", "lang", "Foo"] ->
  // ExpressionName(
  //   AmbiguousName(
  //     AmbiguousName(
  //       AmbiguousName(Id("mb"))
  //     , Id("pie")
  //     )
  //   , Id("lang")
  //   )
  // , Id("Foo")
  // )
  java-qualifiedClass-to-expressionName:
    [name] -> ExpressionName(Id(name))
  java-qualifiedClass-to-expressionName:
    name@[_|_] -> ExpressionName(<java-qualifiedClass-to-expressionName-after-reverse> rest, Id(fst))
    where
      [fst | rest] := <reverse> name

  java-qualifiedClass-to-expressionName-after-reverse: [name|[]] -> AmbiguousName(Id(name))
  java-qualifiedClass-to-expressionName-after-reverse:
    [name|rest] -> AmbiguousName(<java-qualifiedClass-to-expressionName-after-reverse> rest, Id(name))

rules // java class names

  /**
   * pie-func-name-to-javaClassId: name -> javaClassId
   * Type: string -> string
   *
   * Transform a PIE function name to a fully qualified Java class name.
   *
   * name: The name of a PIE function. Needs to be from the AST.
   */
  pie-func-name-to-javaClassId:
    name -> javaClassId
    with
      funcKind    := <pie-ast-ref-prop(|"kind")> name
    ; javaClassId := <pie-get-javaClassId(|funcKind)> name

    pie-get-javaClassId(|PieFuncKind()): name -> javaClassId
    with
      simpleJavaClassId        := <pie-func-name-to-simpleJavaClassId> name
    ; fullyQualifiedModuleList := <pie-ast-ref-prop(|"qualifiedModule")> name
    ; encompassingClassName    := <concat-strings-separator(|".")> fullyQualifiedModuleList
    ; javaClassId              := $[[encompassingClassName].[simpleJavaClassId]]

    pie-get-javaClassId(|PieForeignFuncKind()        ): name -> <pie-ast-ref-prop(|"javaClassId")> name
    pie-get-javaClassId(|JavaForeignFuncKind()       ): name -> <pie-ast-ref-prop(|"javaClassId")> name
    pie-get-javaClassId(|JavaForeignConstructorKind()): name -> <pie-ast-ref-prop(|"javaClassId")> name

  /**
   * pie-func-name-to-simpleJavaClassId: name -> simpleName
   * Type: string -> string
   *
   * simpleJavaClassId is just the class name (not qualified)
   * Transform a PIE function name to an unqualified Java class name.
   *
   * name: The name of a PIE function. Needs to be from the AST.
   */
  pie-func-name-to-simpleJavaClassId:
    name -> simpleName
    with
      funcKind   := <pie-ast-ref-prop(|"kind")> name
    ; simpleName := <pie-get-simpleJavaName(|funcKind)> name

    pie-get-simpleJavaName(|PieFuncKind()): name -> <pie-sanitize-class-id> name
    pie-get-simpleJavaName(|PieFuncKind()): name -> <pie-javaClassId-to-simpleName> <pie-func-name-to-javaClassId> name
    pie-get-simpleJavaName(|PieFuncKind()): name -> <pie-javaClassId-to-simpleName> <pie-func-name-to-javaClassId> name
    pie-get-simpleJavaName(|PieFuncKind()): name -> <pie-javaClassId-to-simpleName> <pie-func-name-to-javaClassId> name

    pie-javaClassId-to-simpleName: javaClassId -> <last> <string-tokenize(|['.'])> javaClassId

rules

  pie-sanitize-class-id = string-replace(|"-", "_"); string-replace(|".", "_")
