module gen/java/type

imports

  libspoofax/stratego/debug

  src-gen/signatures/-
  signatures/metaborg-java-sig
  signatures/java/arrays/-
  signatures/java/classes/-
  signatures/java/interfaces/-
  signatures/java/lexical/-
  signatures/java/literals/-
  signatures/java/names/-
  signatures/java/packages/-
  signatures/java/statements/-
  signatures/java/types/-
  signatures/java/expressions/-

  statics

  gen/idtype-tuples
  gen/util
  gen/java/ast-util

signature
  constructors
    DataType : scope -> TYPE
    GenericParameter2TYPE : GenericParameter -> TYPE

  sorts GenericParameter constructors
    GenericParameter : scope * string -> GenericParameter

rules

  p2j-ast-type-sig: UnitType() -> ClassType([], Id("None"), None())
  p2j-ast-type-sig: BoolType() -> ClassType([], Id("Boolean"), None())
  p2j-ast-type-sig: IntType()  -> ClassType([], Id("Integer"), None())
  p2j-ast-type-sig: StrType()  -> ClassType([], Id("String"), None())
  p2j-ast-type-sig: PathType() -> ClassType([], Id("FSPath"), None())
  with
    <add-import> "mb.resource.fs.FSPath"
  p2j-ast-type-sig: TopType()  -> ClassType([], Id("Object"), None())
  p2j-ast-type-sig: NullType() -> ClassType([], Id("Void"), None())

  p2j-ast-type-sig:
    DataType(scope) -> ClassType([], Id(javaClassId), typeArguments)
    where
      <pie-get-data-mods; not(collect-one(?Transient()))> scope
    with
      ContextName(javaClassId) := <pie-get-context(|"foreign_java_impl")> scope
    ; typeArgs                 := <pie-get-type-args> scope
    ; typeArguments            := <p2j-ast-type-arg-list> typeArgs

  p2j-ast-type-sig:
    DataType(scope) -> ClassType(
      [],
      Id("OutTransient"),
      Some(TypeArguments([ClassType([], Id(javaClassId), typeArguments)]))
    )
    where
      <pie-get-data-mods; collect-one(?Transient())> scope
    with
      ContextName(javaClassId) := <pie-get-context(|"foreign_java_impl")> scope
    ; typeArgs                 := <pie-get-type-args> scope
    ; typeArguments            := <p2j-ast-type-arg-list> typeArgs
    ; <add-import> "mb.pie.api.OutTransient"

  p2j-ast-type-sig:
    TupleType(pieTypes) -> ClassType([], Id($[Tuple[length]]), Some(TypeArguments(javaTypes)))
    with
      length    := <length> pieTypes
    ; javaTypes := <map(p2j-ast-type-sig)> pieTypes
    ; <add-import> $[mb.pie.util.Tuple[length]]
    ; <add-import> "mb.pie.util.Util"

  p2j-ast-type-sig:
    ListType(ty) -> ClassType([], Id("ArrayList"), Some(TypeArguments([<p2j-ast-type-sig> ty])))
    with
      <add-import> "java.util.ArrayList"

  p2j-ast-type-sig:
    t@EmptyListType() -> <error(|"Cannot generate code for empty list. Use a type hint to specify the type you need")> t
    where
      <ppdebugna(|"In emptylisttype! ")> t

  p2j-ast-type-sig: NullableType(ty) -> <p2j-ast-type-sig> ty // Java types are always nullable

  p2j-ast-type-sig:
    SupplierType(ty) -> ClassType([], Id("Supplier"), Some(TypeArguments([<p2j-ast-type-sig> ty])))
    with
      <add-import> "mb.pie.api.Supplier"

rules // type arguments

  /**
   * p2j-ast-type-args: typeArgs -> typeArguments
   *   Type: PIE TypeArgs -> Some with java TypeArguments/1 constructor, or None()
   * Converts the PIE syntactic types to Java types and then wraps it in a TypeArguments/1 constructor
   */
  p2j-ast-type-args: NoTypeArgs() -> None()
  p2j-ast-type-args: TypeArgs(typeArgs) -> typeArguments
    with
      types := <map(syntacticToSemanticType)> typeArgs
    ; typeArguments := <p2j-ast-type-arg-list> types

  /**
   * p2j-ast-type-arg-list: typeArgs -> typeArguments
   *   Type: list of PIE types -> Some with java TypeArguments/1 constructor, or None()
   * Converts the PIE types to Java types and then wraps it in a TypeArguments/1 constructor
   */
  p2j-ast-type-arg-list: typeArgs@[_|_] -> Some(TypeArguments(javaTypeArgs))
    with
      javaTypeArgs := <map(p2j-ast-type-sig)> typeArgs
  p2j-ast-type-arg-list: [] -> None()

rules

  // p2j-ast-type-generate-dataclass(|name):
  //   list of (varId, Pie type) -> Java (data)class declaration AST node
  p2j-ast-type-generate-dataclass(|name):
    idPieTypeTuples -> result
    with
      <add-import> "org.checkerframework.checker.nullness.qual.Nullable"
    ; <add-import> "java.io.Serializable"
    ; <add-import> $[mb.pie.util.Tuple[<length> idPieTypeTuples]]
    ; <add-import> $[mb.pie.util.Util]
    ; tupleTy        := $[Tuple[<length> idPieTypeTuples]]
    ; tys            := <map(Snd)> idPieTypeTuples
    ; types          := <map(p2j-ast-type-sig)> tys
    ; idTypeTuples   := <zip> (<map(Fst)> idPieTypeTuples, types)
    ; getters        := <nmap(type-tuple-to-ast-getter | 1)> idTypeTuples
    ; params         := <create-ast-formal-params> idTypeTuples
    ; callParams     := <map(type-tuple-to-ast-call-param)> idTypeTuples
    ; tupleNumParams := <nmap(type-tuple-to-ast-tuple-field-get | 1)> idTypeTuples
    ; tupleTypes     := <map(type-tuple-to-type)> idTypeTuples
    ; result         := ClassDeclaration(
        [Public(), Static(), Final()]
      , Id(name)
      , None()
      , Some(SuperClass(ClassType([], Id(tupleTy), Some(TypeArguments(tupleTypes)))))
      , Some(SuperInterface([ClassType([], Id("Serializable"), None())]))
      , <concat> [
          [
            ConstrDecl(
              [Public()]
            , None()
            , Id(name)
            , params
            , None()
            , Some(SuperConstrInv(None(), callParams))
            , []
            )
          , MethodDecl(
              [MarkerAnno(TypeName(Id("Nullable"))), Public(), Static()]
            , MethodHeader(
                ClassType(Id(name), None())
              , Id("fromTuple")
              , SingleParam(FormalParam(
                  [MarkerAnno(TypeName(Id("Nullable")))]
                , ClassType(Id(tupleTy), Some(TypeArguments(tupleTypes)))
                , VariableDecl(Id("tuple"))
                ))
              , []
              , None()
              )
            , Block([
                If(Eq(ExpressionName(Id("tuple")), Null()), Return(Null()))
              , Return(NewInstance(None(), [], Id(name), [], None(), tupleNumParams))
              ])
            )
          ]
        , getters
        ]
      )
      // Note: meaning of this AST:
      //   public static final class [name] extends [tupleTy]<[tupleTypes]> implements Serializable {
      //     public [name]([params]) {
      //       super([callParams]);
      //     }
      //
      //     @Nullable
      //     public static [name] fromTuple(@Nullable [tupleTy]<[tupleTypes]> tuple) {
      //       if (tuple == null) {
      //         return null;
      //       }
      //       return new [name]([tupleNumParams]);
      //     }
      //     [getters]
      //   }

  // create-formal-params: list of (varId, Java type) -> params
  // Converts a list of type tuples into the correct FormalParamaters constructor
  // (NoParams, SingleParam or ParamList)
  create-ast-formal-params: idTypeTuples -> NoParams()
  where
    0 := <length> idTypeTuples

  create-ast-formal-params: idTypeTuples -> SingleParam(<type-tuple-to-ast-formal-param> idTypeTuple)
  where
    1 := <length> idTypeTuples
  with
    [idTypeTuple] := idTypeTuples

  create-ast-formal-params: idTypeTuples -> result
  where
    <gt> (<length> idTypeTuples, 1)
  with
    rest   := <map(type-tuple-to-ast-formal-param)> <take(|<dec> <length> idTypeTuples)> idTypeTuples
  ; last   := <type-tuple-to-ast-formal-param> <last> idTypeTuples
  ; result := ParamList(rest, last)

  type-tuple-to-ast-field:
    (varId, ty) -> FieldDecl([Public(), Final()], <java-classType-to-unannType> ty, [varId])
    // Note: meaning of this AST: public final [ty] [varId];
  type-tuple-to-type: (varId, ty) -> ty
  type-tuple-to-ast-tuple-field-get(|number):
    _ -> InvokeQExp(ExpressionName(Id("tuple")), None(), Id($[component[number]]), [])
    // Note: meaning of this AST: tuple.component[number]()
  type-tuple-to-ast-getter(|number): (varId, ty) -> MethodDecl(
      [Public(), Final()]
    , MethodHeader(<java-classType-to-unannType> ty, Id($[get_[varId]]), NoParams(), [], None())
    , Block([Return(Invoke(MethodName(Id($[component[number]])), []))])
    )
    // Note: meaning of this AST:
    //   public final [ty] get_[varId]() {
    //     return component[number]();
    //   }
  type-tuple-to-ast-formal-param:
    (varId, ty) -> FormalParam([], <java-classType-to-unannType> ty, VariableDecl(Id(varId)))
    // Note: meaning of this AST: [ty] [varId]
  type-tuple-to-ast-call-param: (varId, ty) -> ExpressionName(Id(varId))
  type-tuple-to-ast-assignment:
    (varId, ty) -> ExpressionStatement(Assign(Field(This(), Id(varId)), ExpressionName(Id(varId))))
    // Note: meaning of this AST: this.[varId] = [varId]
