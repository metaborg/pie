module statics/common

imports

  signatures/common-sig
  signatures/func_body-sig
  statics/base
  statics/type
  statics/module
  statics/func_body

rules

  /**
   * getRoot(s)
   * Get the root scope. The root scope is the scope passed to
   * statics/project!projectOk.
   * All scopes have a path of 0 or more P edges to a scope that declares the
   * root scope in the !root relation.
   */
  getRoot : scope -> scope
  getRoot(s) = s_root :- {occs}
    query root filter P* in s |-> occs,
    occs == [(_, s_root)|_] | error $[BUG: cannot resolve root scope from [s]. occs: [occs]].

  /**
   * getFileIfExists(s) = s_files
   * Finds the file scope that a scope is defined in (i.e. given a scope in a
   * function it returns the scope of the file that the function is declared
   * in).
   * Returns a list of zero or one element.
   */
  getFileIfExists : scope -> list(scope)
  getFileIfExists(s) = getScopes(occs) :-
    query file
      filter P*
      min $ < P
      and {s1, s2 :- s1 == s2}
      in s |-> occs.

  /**
   * getScope(occ) = s
   * Gets the scope [s] from an occurence [occ].
   */
  getScope : (path * scope) -> scope
  getScopes maps getScope(list(*)) = list(*)
  getScope((_, s)) = s.

  /**
   * emptyScope(s) -> s_empty
   * Returns an empty scope with simple module name <NONE>.
   * scope [s] is used to set the root scope.
   * Because it is returned, it cannot be extended.
   * This function is used in error cases where a scope should be returned but
   * none were found, e.g. resolving a non-existent module.
   */
  emptyScope : scope -> scope
  emptyScope(s) = s_empty :-
    new s_empty,
    !root[getRoot(s)] in s_empty,
    setModuleName(s_empty, "<NONE>"),
    setFileIfExists(s, s_empty),
    setContext(s_empty, "data_name_unqualified", ContextName("<NONE>")),
    !data_mods[[]] in s_empty.

  /**
   * setFileIfExists(s, s_new)
   * Copies the file value (if any) over from scope [s] to scope [s_new].
   */
  setFileIfExists : scope * scope
  setFileIfExists(s, s_new) :- setFileIfExists_1(getFileIfExists(s), s_new, s).

    setFileIfExists_1 : list(scope) * scope * scope
    setFileIfExists_1([], _, _).
    setFileIfExists_1([s_file], s_new, _) :- !file[s_file] in s_new.
    setFileIfExists_1([_,_|_], _, s) :- false | error $[BUG: multiple files from scope [s]].

  /**
   * CreatePEdge(s1, s2)
   * Creates a P edge from s1 to s2.
   */
  createPEdge : scope * scope
  createPEdges maps createPEdge(*, list(*))
  createPEdge(s1, s2) :- s1 -P-> s2.

  /**
   * mergeScopes(s, scopes) = s_merged
   * "Merges" [scopes] into one by creating an auxilary scope [s_merged] that
   * points to all the provided scopes.
   * [s] is not merged, it is needed to set the root for [s_merged]
   */
  mergeScopes : scope * list(scope) -> scope
  mergeScopes(s, scopes) = s_merged :-
    new s_merged,
    !root[getRoot(s)] in s_merged,
    createPEdges(s_merged, scopes).

  /**
   * mergeDataAndNormalScopes(s_data, s) = s_merged
   * "Merge" scopes [s_data] and [s] into a merged scope [s_merged].
   * Uses a DATA edge to point to [s_data] and a P edge to point to [s].
   */
  mergeDataAndNormalScopes : scope * scope -> scope
  mergeDataAndNormalScopes(s_data, s) = s_merged :-
    new s_merged,
    !root[getRoot(s)] in s_merged,
    s_merged -DATA-> s_data,
    s_merged -P-> s.


  /**
   * expectAssignableTo(s1, exp, expected_ty, assignable_kind) = s2
   * expect Exp [exp] to be assignable to type [expected_ty] in scope [s1]
   * give an error otherwise
   * returns the updated scope [s2]
   */
  expectAssignableTo : scope * Exp * TYPE * AssignableKind -> scope
  expectAssignableTo(s1, exp, expected_ty, assignable_kind) = s2 :- {actual_ty}
    typeOfExp(s1, exp) == (s2, actual_ty),
    assignableTo(actual_ty, expected_ty, assignable_kind) | error $[Type mismatch: expected [expected_ty] type, got [actual_ty]] @exp.

  /**
   * expectAssignableToPassScopes(s1, exps, types, assignable_kind) = s2
   * Expect Exps [exps] to have types [tys]. This version passes along scopes
   * from one expression to the next.
   */
  expectAssignableToPassScopes : scope * list(Exp) * list(TYPE)* AssignableKind  -> scope
  expectAssignableToPassScopes(s, [], [], _) = s.
  expectAssignableToPassScopes(s1, [exp | exps], [ty | tys], assignable_kind) = s3 :- {s2}
    expectAssignableTo(s1, exp, ty, assignable_kind) == s2,
    expectAssignableToPassScopes(s2, exps, tys, assignable_kind) == s3.
  expectAssignableToPassScopes(s, [], types@[_|_], _) = s :- false | error $[Unexpected number of arguments; remaining types: [types]].
  expectAssignableToPassScopes(s, exps@[_|_],  [], _) = s :- false | error $[Unexpected number of arguments; remaining expressions: [exps]].

  /**
   * moduleToList(mod@Module(moduleList, name))
   * Convert a Module [mod] to a list of the modules
   * Append [name] to the [moduleList].
   */
  moduleToList : Module -> list(MODID)
  moduleToList(Module(NoModuleList(), name)) = [name].
  moduleToList(Module(ModuleList(mods), name)) = appendString(mods, name).

  /**
   * concatModuleLists(moduleList1, moduleList2) = moduleList
   * concatenates the two lists of MODULEs
   */
  concatModuleLists : list(MODULE) * list(MODULE) -> list(MODULE)
  concatModuleLists([], modules) = modules.
  concatModuleLists([mod|mods], modules) = [mod|concatModuleLists(mods, modules)].


  /**
   * appendString(strs, newStr)
   * append string [newStr] to list of strings [strs].
   */
  appendString : list(string) * string -> list(string)
  appendString([], newStr) = [newStr].
  appendString([str|strs], newStr) = [str|appendString(strs, newStr)].

  /**
   * getLast(names) = name
   * Gets the last name in a list of names.
   * This is a more efficient version of splitLast if case you only want the
   * last name and not the names before that.
   * Reports a bug if the list is empty.
   */
  getLast : list(string) -> string
  getLast([]) = "<<ERROR>>" :- false | error "BUG: called getLast with empty list".
  getLast([name]) = name.
  getLast([_|name]) = getLast(name).

  /**
   * splitLast(strs) = (start_strs, last)
   * splits a list of strings into the starting strings and the last string.
   * Reports a bug if the list is empty.
   * Use getLast if you only need the last element.
   */
  splitLast : list(string) -> (list(string) * string)
  splitLast([]) = res :- false | error "BUG: called splitLast with empty list.".
  splitLast([str]) = ([], str).
  splitLast([str|strs]) = ([str|rest], last) :- splitLast(strs) == (rest, last).
