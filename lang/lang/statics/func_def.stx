module statics/func_def

imports

  signatures/constructors-sig
  signatures/pie-sig
  signatures/func_def-sig
  statics/base
  statics/type
  statics/type_common
  statics/common
  statics/func_body

rules

  funcDefOk : scope * FuncDef
  funcDefOk(s_mod, func@FuncDef(func_head@FuncHead(name, type_params, _, _), impl)) :-
    {s_func out_ty impl_kind ty}
    typeOfFuncHead(s_mod, s_mod, func_head) == (s_func, ty@FuncDefType(_, _, out_ty)),
    declareFunc(s_mod, name, (s_func, ty), impl_kind),
    declareLocalFunc(s_mod, name, (s_func, ty)),
    funcImplOk(s_func, impl, func_head, out_ty) == impl_kind,
    @func.kind := impl_kind,
    @func.type := ty.

  typeOfFuncHead : scope * scope * FuncHead -> (scope * TYPE)
  typeOfFuncHead(s, s_parent, FuncHead(name, type_params, Params(params), out_ty_exp)) =
    (s_func, FuncDefType(type_param_tys, param_tys, out_ty))
  :-
    new s_func,
    s_func -P-> s_parent,
    typesOfTypeParams(s, s_func, type_params) == type_param_tys,
    typeOfParams(s, s_func, s_func, params, InputValKind()) == param_tys,
    typeOf(s, s_func, out_ty_exp, FALSE(), []) == out_ty,
    try { out_ty != WildcardType(_, _, _) } | error $[Cannot use a wildcard as return type. Use its upper bound instead] @out_ty_exp.

  typeOfParam : scope * scope * scope * Param * ValKind -> TYPE
  typeOfParams maps typeOfParam(*, *, *, list(*), *) = list(*)

  typeOfParam(s_mod, s_type_args, _, Param(lexical_type), _) = semantic_type :-
    typeOf(s_mod, s_type_args, lexical_type, FALSE(), []) == semantic_type,
    try { semantic_type != WildcardType(_, _, _) } | error $[Cannot use a wildcard as parameter type. Use the upper bound of the wildcard instead] @lexical_type.

  typeOfParam(s_mod, s_type_args, s_func, NParam(value_id, lexical_type), val_kind) = semantic_type :-
    typeOf(s_mod, s_type_args, lexical_type, FALSE(), []) == semantic_type,
    declareValIfNotAnonymous(s_func, value_id, semantic_type, val_kind) == _,
    try { semantic_type != WildcardType(_, _, _) } | error $[Cannot use a wildcard as parameter type. Use the upper bound of the wildcard instead] @lexical_type.


  funcImplOk : scope * FuncImpl * FuncHead * TYPE -> FuncImplKind
  funcImplOk(_, PieForeignFuncImpl(class_id), FuncHead(name, _, Params(params), _), _) = PieForeignFuncKind() :-
    warnForUselessAnonymousParameters(params),
    @name.javaClassId := class_id.
  funcImplOk(_, JavaForeignFuncImpl(class_id, java_name), FuncHead(name, _, Params(params), _), _) = JavaForeignFuncKind() :-
    warnForUselessAnonymousParameters(params),
    @name.javaClassId := class_id,
    @name.javaMethodId := java_name.
  funcImplOk(_, JavaForeignConstructorImpl(class_id), FuncHead(name, _, Params(params), _), _) = JavaForeignConstructorKind() :-
    warnForUselessAnonymousParameters(params),
    @name.javaClassId := class_id.
  funcImplOk(
    s_func_outer,
    PieFuncImpl(injections, Exp2PieFuncBody(exp), keyFunc),
    FuncHead(name, type_params, Params(params), _),
    expected_type
  ) = PieFuncKind() :-
    {s_func_inner s_injections}
    new s_func_inner,
    s_func_inner -P-> s_func_outer,
    setContext(s_func_inner, "func_return_type", ContextType(expected_type)),
    injectionsOk(s_func_inner, injections) == s_injections,
    expectAssignableTo(s_injections, exp, instantiateTypeArgs(s_func_inner, expected_type), ExpressionKind()) == _,
    optionalKeyFuncOk(s_func_outer, keyFunc),
    noteForUselessAnonymousParameters(params),
    // See https://github.com/MeAmAnUsername/pie/issues/181
    try { getTypeParamsList(type_params) == [] } | error $[Code generation for PIE tasks with type parameters has not been implemented yet. Implement this task in Java and import it as foreign [name] instead] @type_params.

    warnForUselessAnonymousParameter : Param
    warnForUselessAnonymousParameters maps warnForUselessAnonymousParameter(list(*))
    warnForUselessAnonymousParameter(NParam(av@AnonymousValue(), ty)) :-
      try{ ty == DataTy2Type(DataTy(ModuleList(_), _, _)) }
        | warning $[Anonymous parameter name can be omitted. Alternatively, the parameter can have a proper name.] @av.
    warnForUselessAnonymousParameter(_).

    noteForUselessAnonymousParameter : Param
    noteForUselessAnonymousParameters maps noteForUselessAnonymousParameter(list(*))
    noteForUselessAnonymousParameter(NParam(av@AnonymousValue(), _)) :-
      try{false} | note $[Anonymous parameter _ cannot be referred to but will be included in the generated task signature. If this is not required, this parameter can be removed. If this is intended, it is recommended to add a comment explaining why this is necessary. To refer to this parameter, use a different name.] @av.
    noteForUselessAnonymousParameter(_).

  injectionsOk : scope * PieFuncInjections -> scope
  injectionsOk(s_func, NoInjections()) = s_func.
  injectionsOk(s_func, inj@Injections(Params(params))) = s_injections :-
    new s_injections,
    s_injections -P-> s_func,
    typeOfParams(s_func, s_injections, s_injections, params, InjectedValKind()) == _,
    try { params != [] } | warning $[Empty injections are useless and can be omitted] @inj,
    checkUnnamedInjections(params).

    checkUnnamedInjection : Param
    checkUnnamedInjections maps checkUnnamedInjection(list(*))
    checkUnnamedInjection(p@Param(_)) :-
      false | error $[Injections must be named. This injection must be named or removed.] @p.
    checkUnnamedInjection(NParam(av@AnonymousValue(), _)) :-
      false | error $[Injections must be named. An anonymous value is not a proper name. This injection must be named or removed.] @av.
    checkUnnamedInjection(NParam(_, _)).

  keyFuncOk : scope * PieKeyFunc
  optionalKeyFuncOk maps keyFuncOk(*, list(*))

  keyFuncOk(s_func_outer, PieKeyFunc(Exp2PieFuncBody(exp))) :- {s_keyfunc}
    new s_keyfunc,
    s_keyfunc -P-> s_func_outer,
    typeOfExp(s_keyfunc, exp) == _.
