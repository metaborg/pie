module statics/data

imports

  signatures/constructors-sig
  signatures/data-sig
  statics/base
  statics/type
  statics/type_common
  statics/common
  statics/func_def

rules

  dataDefOk : scope * DataDef
  dataDefOk(s, DataDef(DataDefMods(mods), name, generic_params, super, impl)) :- {s_data_def}
    dataDefModsOk(mods),
    new s_data_def,
    !root[getRoot(s)] in s_data_def,
    setFileIfExists(s, s_data_def),
    setContext(s_data_def, "data_name_unqualified", ContextName(name)),
    !data_mods[mods] in s_data_def,
    genericParamsOk(s, s_data_def, generic_params) == _,
    declareData(s, name, s_data_def),
    declareLocalData(s, name, s_data_def),
    superOk(s, s_data_def, super, name),
    dataImplOk(s, s_data_def, impl).

  dataDefModsOk : list(DataDefMod)
  dataDefModsOk([]).
  dataDefModsOk([mod|mods1]) :- {mods2}
    dataDefModsOk_1(mods1, mod) == mods2,
    dataDefModsOk(mods2).

    // checks that mods list does not contain a duplicate modifier
    // returns list with duplicates removed
    dataDefModsOk_1 : list(DataDefMod) * DataDefMod -> list(DataDefMod)
    dataDefModsOk_1([], _) = [].
    dataDefModsOk_1([mod|mods], mod) = mods_out :-
      dataDefModsOk_1(mods, mod) == mods_out,
      false | error $[Duplicate modifier [mod]] @mod.
    dataDefModsOk_1([mod1|mods], mod2) = [mod1|mods_out] :-
      dataDefModsOk_1(mods, mod2) == mods_out.

  superOk : scope * scope * SuperType * string
  superOk(s, s_data_def, NoSuperType(), name).
  superOk(s, s_data_def, SuperType(data_ty@DataTy(_, super_name, _)), name) :- {s_super occs}
    typeOfDataTy(s, s_data_def, data_ty, FALSE()) == DataType(s_super),
    s_data_def -INHERIT-> s_super,
    inherits(s_super, s_data_def) == FALSE() | error $[Cannot (indirectly) inherit from self. [super_name] is already an (indirect) subtype of [name]] @super_name,
    query func filter e in s_data_def |-> occs,
    superOk_1s(s_data_def, s_super, occs).

    // check that all functions of current are valid overrides of super.
    superOk_1 : scope * scope * (path * (FUNCID * (scope * TYPE)))
    superOk_1s maps superOk_1(*, *, list(*))
    superOk_1(s_data_def, s_super, (_, (name, func_ty))) :- {occs}
      resolveFunc(s_super, name) == occs,
      superOk_2s(s_data_def, s_super, func_ty, occs, name).

    // Check that function is either a valid override or not an override
    superOk_2 : scope * scope * (scope * TYPE) * (path * (FUNCID * (scope * TYPE))) * FUNCID
    superOk_2s maps superOk_2(*, *, *, list(*), *)
    superOk_2(s_data_def, s_super, (s_func, FuncType(type_params, param_tys, ty_out)), (_, (name_super, (s_func_super, FuncType(type_params_super, param_tys_super, ty_out_super)))), name) :-
      {super_params params isAllInvariant}
      // todo: use type_params, type_params_super, s_func, s_func_super
      eraseTypes(instantiateTypeArgsInAll(s_super, param_tys_super)) == super_params,
      eraseTypes(instantiateTypeArgsInAll(s_data_def, param_tys)) == params,
      isAllInvariant(super_params, params) == isAllInvariant,
      superOk_3(isAllInvariant, s_data_def, s_super, name, params, ty_out, name_super, param_tys_super, ty_out_super).

    // if function is an override, require return type to be compatible.
    // if function is not an override, check that it doesn't collide with
    // another function after erasure.
    superOk_3 : BOOLEAN * scope * scope * TYPEID * list(TYPE) * TYPE * TYPEID * list(TYPE) * TYPE
    superOk_3(TRUE(), s_data_def, s_super, name, _, ty_out, name_super, _, ty_out_super) :-
      @name.ref := name_super,
      assignableTo(instantiateTypeArgs(s_data_def, ty_out), instantiateTypeArgs(s_data_def, ty_out_super))
        | error $[Type mismatch: incompatible return type for override] @name.
    superOk_3(FALSE(), _, s_super, name, erased_params, _, _, super_params, _) :-
      {generic_def erased_super_params}
      getGenericDef(s_super) == generic_def,
      eraseTypes(instantiateTypeArgsInAll(generic_def, super_params)) == erased_super_params,
      isAllInvariant(erased_params, erased_super_params) == FALSE()
        | error $[[name] collides with method in super type: this method does not override method in supertype but has the same signature after type erasure].

  dataImplOk : scope * scope * DataImpl
  dataImplOk(s, s_data, JavaDataImpl(java_name, members)) :-
    setContext(s_data, "foreign_java_impl", ContextName(java_name)),
    javaDataMembersOk(s, s_data, members).

  javaDataMemberOk : scope * scope * JavaDataMemb
  javaDataMembersOk maps javaDataMemberOk(*, *, list(*))
  javaDataMemberOk(s, s_data, JavaFuncDef(func_head)) :- {s_func name ty}
    typeOfFuncHead(s, s_data, func_head) == (s_func, name, ty),
    declareFunc(s_data, name, (s_func, ty), JavaForeignFuncKind()).


  getDataName : scope -> TYPEID
  getDataName(s) = name :-
    getContext(s, "data_name_unqualified") == ContextName(name).
