module func_head_syntax
language pie

fixture [[
  module test:func:head

  func [[...]] = 0
]]

// function name
test missing name [[() -> int]] parse fails
test name lowercase letter [[a() -> int]]
test name uppercase letter [[B() -> int]]
test name normal name [[duplicate() -> int]]
test name with number [[const6() -> int]]
test name starts with number [[7foo() -> int]] parse fails
test name dash [[foo-bar() -> int]]
test name start with dash [[-bar() -> int]]
test name ends with dash [[bar-() -> int]]
test name underscore [[foo_bar() -> int]]
test name start with underscore [[_foo() -> int]]
test name ends with underscore [[foo_() -> int]]
test name everything [[-helloW0rld_I_am-a-function4() -> int]]

// function generic parameters
test generic parameters empty list [[a[]() -> int]]
test generic parameters omitted list [[f() -> int]]
test generic parameters missing closing bracket [[h[() -> int]] parse fails
test generic parameters missing opening bracket [[j]() -> int]] parse fails
test generic parameters multiple lists [[j[][]() -> int]] parse fails

test generic parameters single uppercase letter [[a[T]() -> int]]
test generic parameters single lowercase letter [[a[t]() -> int]]
test generic parameters multi-letter all lowercase [[a[type]() -> int]]
test generic parameters multi-letter all uppercase [[a[THING]() -> unit]]
test generic parameters multi-letter [[a[Kind]() -> Kind]]
test generic parameters camelcase [[a[SomeParam]() -> int]]
test generic parameters dash in name [[a[some-name]() -> int]]
test generic parameters start with dash [[a[-hello]() -> int]]
test generic parameters end with dash [[a[hello-]() -> int]]
test generic parameters underscore in name [[a[Some_Name]() -> int]]
test generic parameters start with underscore [[a[_hello]() -> int]]
test generic parameters end with underscore [[a[hello_]() -> int]]
test generic parameters number in name [[a[hello2world]() -> int]]
test generic parameters start with number [[a[4world]() -> int]] parse fails
test generic parameters end with number [[a[world9]() -> int]]
test generic parameters ampersand in name [[a[hello&world]() -> int]] parse fails

test generic parameters one parameter missing brackets [[resultOfOk T(value: T) -> Result[T, _ : Exception] ]] parse fails
test generic parameters one parameter no bounds [[resultOfOk[T](value: T) -> Result[T, _ : Exception] ]]
test generic parameters one parameter upper bound [[resultOfErr[E : Exception](error: E) -> Result[_, E] ]]
test generic parameters one parameter lower bound [[addToList[C -: Cat](list: C*, cat: Cat) -> unit]]
test generic parameters one parameter both bounds [[doTheThing[C : Animal -: Cat](list: C*) -> unit]]
test generic parameters one parameter both bounds reverse order [[
  doTheThing[C -: Cat : Animal](list: C*) -> unit
]] parse to FuncHead(_, GenericParams([
       GenericParam("C", NoUpperBound(), LowerBound(DataTy(ModuleList(["Cat"]), "Animal", _)))
     ]), _, _)

test generic parameters two parameters missing separator [[a[T E]() -> int]] parse fails
test generic parameters two parameters no bounds [[kweh[A, B]() -> bool]]
test generic parameters two parameters upper bound on second [[
  resultOfOkWithExplicitErrorType[T, E : Exception](value: T) -> Result[T, E]
]]
test generic parameters three parameters [[kweh[A, B, C]() -> bool]]
test generic parameters four parameters [[kweh[A, B, C, D]() -> bool]]

// function params
test missing brackets [[test -> int]] parse fails
test missing closing bracket [[test( -> int]] parse fails
test missing opening bracket [[test) -> int]] parse fails
test no params [[test() -> int]]
test one unnamed param [[test(int) -> int]]
test two unnamed params [[test(int, bool) -> int]]
test three unnamed params [[test(int, string, int) -> int]]
test one named param [[test(param: int) -> int]]
test two named params [[test(name: string, age: int) -> int]]
test three named params [[test(param: int) -> int]]
test unnamed, named params [[test(int, flag: bool) -> int]]
test named, unnamed params [[test(name: string, int) -> int]]
test param name missing name [[test(: int) -> int]] parse fails
test param name lowercase letter [[test(g: int) -> int]]
test param name uppercase letter [[test(Y: int) -> int]]
test param name word [[test(hello: int) -> int]]
test param name mixed case [[test(SarCaStIc: int) -> int]]
test param name with dash [[test(foo-bar: int) -> int]]
test param name starts with dash [[test(-fuz: int) -> int]]
test param name ends with dash [[test(fuz-: int) -> int]]
test param name starts with dash [[test(-fuz: int) -> int]]

// function output types
test missing return type [[test() -> ]] parse fails
test missing return type missing arrow [[test()]] parse fails
test missing arrow [[test() int]] parse fails
test return type typescript notation [[test(): int]] parse fails
test return type Java notation [[int test()]] parse fails
test return type int [[test() -> int]]
test return type string [[test() -> string]]
test return type bool [[test() -> bool]]
test return type unit [[test() -> unit]]
test return type custom type [[test() -> CustomType]]
test return type tuple type [[test() -> (int, string)]]
// void is not a type in pie, but it is parsed as a custom data type
test return type void [[test() -> void]] parse to FuncHead(_, _, _, DataTy(_, "void", _))
