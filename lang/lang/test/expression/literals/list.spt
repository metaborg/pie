module expression/literals/list
language pie

fixture [[
  module test:expression:literals:list

  data Fruit = foreign java Fruit {}
  data Apple <: Fruit = foreign java Apple {}
  data Banana <: Fruit = foreign java Banana {}

  func fixture(fruit: Fruit, apple: Apple, banana: Banana) -> unit = {
    [[...]];
    unit
  }
]]

test empty list literal [[ [[ [] ]] ]]
  analysis succeeds
  run pie-ast-type on #1 to EmptyListType()

test list literal single int [[ [[ [3] ]] ]]
  analysis succeeds
  run pie-ast-type on #1 to ListType(IntType())
test list literal single string [[ [[ ["hello world"] ]] ]]
  analysis succeeds
  run pie-ast-type on #1 to ListType(StrType())
test list literal single value reference to custom type
  [[ val list: Banana* = [banana] ]]
  analysis succeeds
test list literal single expression [[ [[ [3 + 8] ]] ]]
  analysis succeeds
  run pie-ast-type on #1 to ListType(IntType())

test list literal multiple ints [[ [[ [1, 2, 3] ]] ]]
  analysis succeeds
  run pie-ast-type on #1 to ListType(IntType())
test list literal heterogeneous types [[ [[ [1, "two", ./three] ]] ]]
  analysis succeeds
  run pie-ast-type on #1 to ListType(TopType())

test list literal type and subtypes
  [[ val list: Fruit* = [fruit, banana, apple] ]]
  analysis succeeds
test list literal subtypes only
  [[ val list: Fruit* = [banana, apple] ]]
  analysis succeeds
test list literal nullable subtypes only
  [[ val list: Fruit?* = [banana?, apple?] ]]
  analysis succeeds
test list literal mixed nullable subtypes
  [[ val list: Fruit?* = [banana, apple?] ]]
  analysis succeeds
