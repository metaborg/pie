module data_def_method
language pie

fixture [[
  module test:data_def:method

  data Food = foreign java dataDef.generics.method.Food {}
  data Fruit : Food = foreign java dataDef.generics.method.Fruit {}
  data Apple : Fruit = foreign java dataDef.generics.method.Apple {}
  data GrannySmith : Apple = foreign java dataDef.generics.method.GrammySmith {}
  data SubtypeOfGrannySmith : GrannySmith = foreign java dataDef.generics.method.SubtypeOfGrannySmith {}

  [[...]]
]]

test foreign java no methods [[ data Foo = foreign java org.example.test.Foo {} ]] analysis succeeds
test foreign java one method [[ data Foo = foreign java org.example.test.Foo {
  func get() -> int
} ]] analysis succeeds
test foreign java two methods [[ data Foo = foreign java org.example.test.Foo {
  func get() -> int
  func set(int) -> unit
} ]] analysis succeeds
test foreign java three methods [[ data Foo = foreign java org.example.test.Foo {
  func get() -> int
  func set(int) -> unit
  func getAndSet(int) -> int
} ]] analysis succeeds
test foreign java allow returning own type [[
  data [[Foo]] = foreign java org.example.test.Foo {
    func get() -> [[Foo]]
  }
]] analysis succeeds
   resolve #2 to #1
test foreign java allow taking own type [[
  data [[Foo]] = foreign java org.example.test.Foo {
    func set([[Foo]]) -> unit
  }
]] analysis succeeds
   resolve #2 to #1
test foreign java allow circular dependency [[
  data [[Bar]] = foreign java org.example.test.Bar {
    func get() -> [[Foo]]
  }
  data [[Foo]] = foreign java org.example.test.Foo {
    func get() -> [[Bar]]
  }
]] analysis succeeds
   resolve #2 to #3
   resolve #4 to #1
test foreign java allow same name methods in different datatypes [[
  data Bar = foreign java org.example.test.Bar {
    func get() -> int
  }
  data Foo = foreign java org.example.test.Foo {
    func get() -> int
  }
]] analysis succeeds
test foreign java disallow overloading method within datatype [[
  data Foo = foreign java org.example.test.Foo {
    func [[get]]() -> int
    func [[get]](int) -> unit
  }
]] 2 errors at #1, #2
   error like "Duplicate" at #1, #2

test foreign java wildcard as parameter type [[
  data Foo = foreign java org.example.test.Foo {
    func wildcardParam(param: [[_ : Food)]] -> unit
  }
]] 1 error at #1
   error like "Cannot use a wildcard"

test foreign java generic data type method parameter [[
  data Foo<[[T]]> = foreign java org.example.test.Foo {
    func set([[T]]) -> unit
  }
]] analysis succeeds
   resolve #2 to #1
test foreign java generic data type method return type [[
  data Foo<[[T]]> = foreign java org.example.test.Foo {
    func get() -> [[T]]
  }
]] analysis succeeds
   resolve #2 to #1
test foreign java generic data type method parameter and return type [[
  data Foo<[[T]]> = foreign java org.example.test.Foo {
    func duplicate(original: [[T]]) -> [[T]]
  }
]] analysis succeeds
   resolve #2 to #1
   resolve #3 to #1


test foreign java generic method - method parameter [[
  data Foo = foreign java org.example.test.Foo {
    func set<[[T]]>([[T]]) -> unit
  }
]] analysis succeeds
   resolve #2 to #1
test foreign java generic method - method return type [[
  data Foo = foreign java org.example.test.Foo {
    func get<[[T]]>() -> [[T]]
  }
]] analysis succeeds
   resolve #2 to #1
test foreign java generic method - method parameter and return type [[
  data Foo = foreign java org.example.test.Foo {
    func duplicate<[[T]]>(original: [[T]]) -> [[T]]
  }
]] analysis succeeds
   resolve #2 to #1
   resolve #3 to #1

test foreign java generic data type and method - duplicate name [[
  data Foo<A> = foreign java org.example.test.Foo {
    func duplicate<[[A]]>() -> unit
  }
]] analysis succeeds
//   todo
//   1 error at #1
//   error like "duplicate generic parameter"
test foreign java generic data type and method - method parameter [[
  data Foo<[[A]]> = foreign java org.example.test.Foo {
    func set<[[B]]>([[A]], [[B]]) -> bool
  }
]] analysis succeeds
   resolve #3 to #1
   resolve #4 to #2
test foreign java generic data type and method - method return type [[
  data Foo<[[A]]> = foreign java org.example.test.Foo {
    func get<[[B]]>() -> ([[B]], [[A]])
  }
]] analysis succeeds
   resolve #3 to #2
   resolve #4 to #1
test foreign java generic data type and method - method parameter and return type [[
  data Foo<[[A]]> = foreign java org.example.test.Foo {
    func set<[[B]]>([[A]]) -> [[B]]
  }
]] analysis succeeds
   resolve #3 to #1
   resolve #4 to #2
