module func_def/anonymous_parameter
language pie

fixture [[
  module test:func_def
  
  data Fruit = foreign java Fruit {}

  [[...]]
]]

test anonymous parameter PIE implementation [[
  func test([[_]]: int) -> int = {[[_]]; 7}
]] 1 error at #2
   error like "Cannot reference anonymous value"
   1 note at #1
   note like "cannot be referred to"
test anonymous parameters PIE implementation [[
  func test([[_]]: int, [[_]]: path) -> int = {[[_]]; 8}
]] 1 error at #3
   error like "Cannot reference anonymous value"
   2 notes at #1, #2
   note like "cannot be referred to" at #1
   note like "cannot be referred to" at #2
test anonymous parameter with unqualified type PIE implementation [[
  func test([[_]]: Fruit) -> int = {[[_]]; 7}
]] 1 error at #2
   error like "Cannot reference anonymous value"
   1 note at #1
   note like "cannot be referred to"
test anonymous parameter with qualified type PIE implementation [[
  func test([[_]]: test:func_def:Fruit) -> int = {[[_]]; 7}
]] 1 error at #2
   error like "Cannot reference anonymous value"
   1 note at #1
   note like "cannot be referred to"

test anonymous parameter foreign java implementation [[
  func test([[_]]: int) -> int = foreign java AnonVal#test
]] analysis succeeds
  1 warning at #1
  warning like "Anonymous parameter name can be omitted."
test anonymous parameters foreign java implementation [[
  func test([[_]]: int, [[_]]: path) -> int = foreign java AnonVal#test
]] analysis succeeds
  2 warnings at #1, #2
  warning like "Anonymous parameter name can be omitted." at #1
  warning like "Anonymous parameter name can be omitted." at #2
test anonymous parameter foreign java constructor implementation [[
  func test([[_]]: int) -> int = foreign java constructor Integer
]] analysis succeeds
   1 warning at #1
   warning like "Anonymous parameter name can be omitted."
test anonymous parameter foreign task implementation [[
  func test([[_]]: int) -> int = foreign AnonVal
]] analysis succeeds
   1 warning at #1
   warning like "Anonymous parameter name can be omitted."


test anonymous parameter with unqualified type foreign java implementation [[
  func test([[_]]: Fruit) -> int = foreign java AnonVal#test
]] analysis succeeds
   1 warning at #1
   warning like "Anonymous parameter name can be omitted."
test anonymous parameter with unqualified type foreign java constructor implementation [[
  func test([[_]]: Fruit) -> int = foreign java constructor Integer
]] analysis succeeds
   1 warning at #1
   warning like "Anonymous parameter name can be omitted."
test anonymous parameter with unqualified type foreign task implementation [[
  func test([[_]]: Fruit) -> int = foreign AnonVal
]] analysis succeeds
   1 warning at #1
   warning like "Anonymous parameter name can be omitted."

test anonymous parameter with qualified type foreign java implementation [[
  func test([[_]]: test:func_def:Fruit) -> int = foreign java AnonVal#test
]] analysis succeeds
   0 warnings
test anonymous parameter with qualified type foreign java constructor implementation [[
  func test([[_]]: test:func_def:Fruit) -> int = foreign java constructor Integer
]] analysis succeeds
   0 warnings
test anonymous parameter with qualified type foreign task implementation [[
  func test([[_]]: test:func_def:Fruit) -> int = foreign AnonVal
]] analysis succeeds
   0 warnings
