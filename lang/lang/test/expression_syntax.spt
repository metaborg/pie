module expression_syntax
language pie
start symbol Exp

test no expression [[ ]] parse fails

test unit literal [[ unit ]] parse succeeds
test unit literal layout between [[ un it ]] parse fails
test boolean literal true [[ true ]] parse succeeds
test boolean literal false [[ false ]] parse succeeds
test int literal single digit [[ 8 ]] parse succeeds
test int literal multiple digit [[ 12376 ]] parse succeeds
test int literal negative [[ -73 ]] parse succeeds
test int literal positive with sign [[ +73 ]] parse fails
test null literal [[ null ]] parse succeeds

test to nullable bool [[ true? ]] parse to ToNullable(BoolLit(True()))
test to nullable bool with layout [[ true ? ]] parse to ToNullable(BoolLit(True()))
test to nullable null [[ null? ]] parse to ToNullable(NullLit())
test to nullable null with layout [[ null ? ]] parse to ToNullable(NullLit())
test to nullable int [[ 8? ]] parse to ToNullable(IntLit("8"))

test to non-nullable bool [[ true! ]] parse to ToNonNullable(BoolLit(True()))
test to non-nullable bool with layout [[ true ! ]] parse to ToNonNullable(BoolLit(True()))
test to non-nullable null [[ null! ]] parse to ToNonNullable(NullLit())
test to non-nullable null with layout [[ null ! ]] parse to ToNonNullable(NullLit())
test to non-nullable int [[ 8! ]] parse to ToNonNullable(IntLit("8"))

test or [[ var == null || someCall(var) ]] parse succeeds
test or no layout around [[ true||true ]] parse succeeds
test or layout between [[ true | | false ]] parse fails
test or missing lhs [[ || true ]] parse fails
test or missing rhs [[ false || ]] parse fails

test and [[ var != null && someCall(var) ]] parse succeeds
test and layout between [[ true & & false ]] parse fails
test and no layout around [[ true&&enableFinagle ]] parse succeeds
test and missing lhs [[ && true ]] parse fails
test and missing rhs [[ false && ]] parse fails

test add no layout [[ 1+3 ]] parse succeeds
test add layout around [[ "hello" + " world" ]] parse succeeds
test add missing lhs [[ +1 ]] parse fails
test add missing rhs [[ 1 + ]] parse fails

test if [[ if (cond) exec("rm -rf --no-preserve-root /") ]] parse succeeds
test if no layout before condition [[ if(enableFinagle) anotherFunc() ]] parse succeeds
test if missing brackets [[ if enableFinagle anotherFunc() ]] parse fails

test ifelse [[ if (cond) "yes" else "no" ]] parse succeeds
test ifelse missing keyword if [[ (cond) "yes" else "no" ]] parse fails
test ifelse missing keyword else [[ if (cond) "yes" "no" ]] parse fails
test ifelse no layout after if [[ if(cond) "yes" else "no" ]] parse succeeds
test ifelse no layout before else [[ if (cond) "yes"else "no" ]] // todo parse fails
test ifelse no layout after else [[ if (cond) "yes" else"no" ]] parse fails
test ifelse no brackets [[ [[ if value == 10 "hello" else "world" ]] ]] parse fails

test ifelse nested in if [[
  if (comment != null)
    if (value == 10) "hello" else "world"
]] parse to [[
  if (comment != null)
    (if (value == 10) "hello" else "world")
]]
test nested ifelse with brackets [[
  if (a)
    (if (b) c else d)
  else
    (if (e) f else g)
]] parse succeeds
test nested ifelse without brackets [[
  if (a)
    if (b) c else d
  else
    if (e) f else g
]] parse succeeds
test nested if with brackets [[
  if (a)
    (if (b) c)
]] parse succeeds
test nested if without brackets [[
  if (a)
    if (b) c
]] parse succeeds
test ifelse nested in double if [[
  if (a)
    if (b)
      if (c) d else e
]] parse to [[
  if (a) (
    if (b) (
      if (c) d else e
    )
  )
]]

test list comprehension [[ [double(x) | x <- values] ]] parse succeeds
test list comprehension no layout [[ [double(x)|x<-values] ]] parse succeeds
test list comprehension missing bar [[ ["$x * 3 = ${x+x+x}" x <- [1, 2, 3] ] ]] parse fails
test list comprehension missing bindings [[ ["$x * 3 = ${x+x+x}" | [1, 2, 3] ] ]] parse fails
test list comprehension missing arrow [[ ["$x * 3 = ${x+x+x}" | x [1, 2, 3] ] ]] parse fails
test list comprehension square brackets [[ "$x * 3 = ${x+x+x}" | x <- [1, 2, 3] ]] parse fails
test list comprehension missing map expression [[ [ | x <- [1, 2, 3] ] ]] parse fails
test list comprehension missing list expression [[ ["$x * 3 = ${x+x+x}" | x <- ] ]] parse fails

test val declaration single bind [[ val x = 8 ]] parse succeeds
test val declaration single bind missing = [[ val x 5 ]] parse fails
test val declaration single bind missing val [[ x = 5 ]] parse fails
test val without layout [[ value: bool = false ]] parse fails
test val declaration single bind missing name [[ val = 5 ]] parse fails
test val declaration reserved keyword unit  [[ val unit  = 5 ]] parse fails
test val declaration reserved keyword null  [[ val null  = 5 ]] parse fails
test val declaration reserved keyword true  [[ val true  = 5 ]] parse fails
test val declaration reserved keyword false [[ val false = 5 ]] parse fails
test val declaration named val [[ val val = 5 ]] parse succeeds
test val declaration named _ [[ val _ = 5 ]] parse succeeds
test val declaration single bind missing expression [[ val x = ]] parse fails
test val declaration single bind no layout around = [[ val x=7 ]] parse succeeds
test val declaration single bind with type missing <: [[ val foo string = "-_-" ]] parse fails
test val declaration single bind with type missing name [[ val : string = "" ]] parse fails
test val declaration single bind with type missing type [[ val foo : = 56 ]] parse fails
test val declaration tuple bind [[ val (x, y) = (9, 3) ]] parse succeeds
test val declaration tuple bind missing = [[ val (x, y) (9, 3) ]] parse fails
test val declaration tuple bind missing val [[ (a, b) = ("A", "B") ]] parse fails
test val declaration tuple bind missing names [[ val = (true, false) ]] parse fails
test val declaration tuple bind missing name [[ val (i, ) = ("no", false) ]] parse fails
test val declaration tuple bind missing expressions [[ val (foo, bar, baz) = ]] parse fails
test val declaration tuple bind missing expression [[ val (x, y, z) = ("yes", , "no")]] parse fails
test val declaration tuple bind with type missing <: [[ val (foo: int, bar int) = (5, 2) ]] parse fails
test val declaration tuple bind with type missing name [[ val (: string, bar: int) = ("hey", 9) ]] parse fails
test val declaration tuple bind with type missing type [[ val (x: , y: bool) = ("string", true) ]] parse fails

test reference [[ foo ]] parse succeeds parse to Ref(ValueId("foo"))
test reference [[ val ]] parse succeeds parse to Ref(ValueId("val"))
test reference reserved keyword unit  [[ unit  ]] parse to UnitLit()
test reference reserved keyword null  [[ null  ]] parse to NullLit()
test reference reserved keyword true  [[ true  ]] parse to BoolLit(True())
test reference reserved keyword false [[ false ]] parse to BoolLit(False())
test reference keyword func [[ func ]] parse to Ref(ValueId("func"))
test reference keyword return [[ return ]] parse to Ref(ValueId("return"))
test reference keyword supplier [[ supplier ]] parse to Ref(ValueId("supplier"))

test call simple [[ someFunc() ]] parse succeeds
test call empty type argument list [[ someFunc[]() ]]
test call missing opening bracket type arguments [[ someFunc]() ]] parse fails
test call missing closing bracket type arguments [[ someFunc[() ]] parse fails
test call missing separator type arguments [[ someFunc[int int]() ]] parse fails
test call one type argument [[ someFunc[int]() ]]
test call type argument with upper bound [[someFunc[T <: Food]()]] parse fails
test call type argument with lower bound [[ someFunc[T :> Food]() ]] parse fails
test call two type arguments [[ someFunc[Food, string]() ]]
test call three type arguments [[ someFunc[int, path, (string, bool)]() ]]
test call three type arguments [[ someFunc[int, path, (string, bool)]() ]]

test call missing brackets [[ someFunc ]] parse succeeds parse to Ref(ValueId("someFunc"))
test call 1 param [[ otherFunc(67) ]] parse succeeds
test call 2 param [[ foo("Bob", true) ]] parse succeeds
test call 3 param [[ exec("rm", flags, false) ]] parse succeeds
test call reserved name return    [[ return()    ]] parse fails
test call reserved name requires  [[ requires()  ]] parse fails
test call reserved name generates [[ generates() ]] parse fails
test call reserved name list      [[ list()      ]] parse fails
test call reserved name walk      [[ walk()      ]] parse fails
test call reserved name supplier  [[ supplier()  ]] parse to CreateSupplier(_, NoTypeArgs(), [])
test call reserved name unit      [[ unit()      ]] parse fails
test call reserved name null      [[ null()      ]] parse fails
test call reserved name true      [[ true()      ]] parse fails
test call reserved name false     [[ false()     ]] parse fails
test call missing brackets [[ double 3 ]] parse fails
test call missing open bracket [[ double 4) ]] parse fails
test call missing close bracket [[ double (6 ]] parse fails
test call missing commas [[ argsFunc(1 3 "no") ]] parse fails
test simple call with layout [[ anotherFunc  (  ) ]] parse succeeds
test fully qualified call [[ foo:bar:baz() ]] parse to Call(ModuleList(["foo", "bar"]), "baz", NoTypeArgs(), [])
test fully qualified call with layout between [[ foo : bar : baz ( ) ]] parse succeeds
test fully qualified call missing module name start [[ :bar:baz:fun() ]] parse fails
test fully qualified call missing module name middle [[ foo::baz:fun() ]] parse fails
test fully qualified call missing module name end [[ foo:bar::fun() ]] parse fails
test fully qualified call missing function name [[ foo:bar:baz:() ]] parse fails
test fully qualified call missing open bracket [[ foo:bar:baz) ]] parse fails
test fully qualified call missing open bracket [[ foo:bar:baz( ]] parse fails

test create supplier no space before bracket [[ supplier(6) ]] parse succeeds
test create supplier space before bracket [[ supplier ("hello") ]] parse succeeds
test create supplier no space within brackets [[ supplier( [1, 2] ) ]] parse succeeds
test create supplier space within keyword [[ sup plier(42) ]] parse fails
test create supplier missing argument [[ supplier() ]]
test create supplier multiple arguments [[ supplier(2, 0) ]]
test create supplier with empty type argument list [[ supplier[](0) ]]
test create supplier with type argument [[ supplier[int](0) ]]
test create supplier capitalized [[ Supplier(0) ]] parse to Call(NoModuleList(), "Supplier", NoTypeArgs(), [IntLit("0")])
test create supplier random capital [[ supplIer(0) ]] parse to Call(NoModuleList(), "supplIer", NoTypeArgs(), [IntLit("0")])
test create supplier all caps [[ SUPPLIER(0) ]] parse to Call(NoModuleList(), "SUPPLIER", NoTypeArgs(), [IntLit("0")])

test task supplier no arguments [[ parse.supplier() ]] parse succeeds
test task supplier with empty type argument list [[ parse.supplier[]() ]] parse succeeds
test task supplier with one type argument [[ parse.supplier[int]() ]] parse succeeds
test task supplier with two type arguments [[ parse.supplier[int, string]() ]] parse succeeds
test task supplier one argument [[ parse.supplier(true) ]] parse succeeds
test task supplier two arguments [[ parse.supplier("no", [some_value]) ]] parse succeeds
test task supplier qualified task name [[ example:test:expression:parse.supplier(ast) ]] parse succeeds
test task supplier spaces around brackets [[ parse.supplier ( ) ]] parse succeeds
test task supplier space before period [[ parse .supplier() ]] parse succeeds
test task supplier space after period [[ parse. supplier() ]] parse succeeds
test task supplier space in keyword [[ parse.suppl ier() ]] parse fails
test task supplier capitalized keyword [[ parse.Supplier() ]] parse to QCall(Ref(ValueId("parse")), "Supplier", NoTypeArgs(), [])

test supplier get [[ supp.get[]() ]] parse succeeds
test supplier get with type argument [[ supp.get[string]() ]] parse succeeds
test supplier get with argument [[ supp.get[]("yes") ]] parse succeeds
test supplier get space before period [[ supp .get[]() ]] parse succeeds
test supplier get space after period [[ supp. get[]() ]] parse succeeds
test supplier get space after get [[ supp.get []() ]] parse succeeds
test supplier get space in diamond [[ supp.get[ ]() ]] parse succeeds
test supplier get space after diamond [[ supp.get[] () ]] parse succeeds
test supplier get space within brackets [[ supp.get[]( ) ]] parse succeeds
test supplier get missing diamond [[ supp.get( ) ]] parse to QCall(Ref(ValueId("supp")), "get", NoTypeArgs(), [])
test supplier get capitalized [[ supp.Get[]( ) ]] parse to QCall(Ref(ValueId("supp")), "Get", TypeArgs([]), [])
test supplier get random capitalized [[ supp.gEt[]( ) ]] parse to QCall(Ref(ValueId("supp")), "gEt", TypeArgs([]), [])
test supplier get all caps [[ supp.GET[]( ) ]] parse to QCall(Ref(ValueId("supp")), "GET", TypeArgs([]), [])

test list absolute path literal [[ list /foo ]] parse succeeds
test list relative path literal [[ list ./foo ]] parse succeeds
test list variable [[ list dir ]] parse succeeds
test list missing layout after keyword followed by slash [[ list/foo ]] parse fails
test list missing layout after keyword followed by period [[ list./foo ]] parse fails
test list missing layout after keyword followed by letter [[ val dir = /test; listdir with extension "txt" ]] parse fails
test list missing layout between path and filter [[ list dirwith extension "txt" ]] parse fails
test list missing layout between filter and filter expression followed by double quote [[ list dir with extension"txt" ]] parse fails
test list missing layout between filter and filter expression followed by open parenthesis [[ list dir with extension("ts") ]] // todo parse fails
test list missing layout between filter and filter expression followed by open square bracket [[ list dir with extensions["js", "ts"] ]] parse fails
test list missing layout between filter and filter expression followed by letter [[ list dir with extensionext ]] parse fails
test list missing list expression with filter [[ list with regex "a+b+\\.txt" ]] parse fails
test list missing regex      expression [[ list ./a with regex      ]] parse fails
test list missing pattern    expression [[ list ./b with pattern    ]] parse fails
test list missing patterns   expression [[ list ./c with patterns   ]] parse fails
test list missing extension  expression [[ list ./d with extension  ]] parse fails
test list missing extensions expression [[ list ./e with extensions ]] parse fails
test list pattern s   [[ list ./e with pattern s   ]] parse to ListPath(PathLit("./",[Path("e")]),Some(FilterPart(Pattern(Ref(ValueId("s"))))))
test list extension s [[ list ./e with extension s ]] parse to ListPath(PathLit("./",[Path("e")]),Some(FilterPart(Extension(Ref(ValueId("s"))))))

test walk absolute path literal [[ walk /foo ]] parse succeeds
test walk relative path literal [[ walk ./foo ]] parse succeeds
test walk variable [[ walk dir ]] parse succeeds
test walk missing layout after keyword followed by slash [[ walk/foo ]] parse fails
test walk missing layout after keyword followed by period [[ walk./foo ]] parse fails
test walk missing layout after keyword followed by letter [[ val dir = /test; walkdir with extension "txt" ]] parse fails
test walk missing layout between path and filter [[ walk dirwith extension "txt" ]] parse fails
test walk missing layout between filter and filter expression followed by double quote [[ walk dir with extension"txt" ]] parse fails
test walk missing layout between filter and filter expression followed by open parenthesis [[ walk dir with extension("js") ]] // todo parse fails
test walk missing layout between filter and filter expression followed by open square bracket [[ walk dir with extensions["js", "ts"] ]] parse fails
test walk missing layout between filter and filter expression followed by letter [[ walk dir with extensionext ]] parse fails
test walk missing walk expression with filter [[ walk with regex "a+b+\\.txt" ]] parse fails
test walk missing regex      expression [[ walk ./a with regex      ]] parse fails
test walk missing pattern    expression [[ walk ./b with pattern    ]] parse fails
test walk missing patterns   expression [[ walk ./c with patterns   ]] parse fails
test walk missing extension  expression [[ walk ./d with extension  ]] parse fails
test walk missing extensions expression [[ walk ./e with extensions ]] parse fails
test walk pattern s   [[ walk ./e with pattern s   ]] parse to WalkPath(PathLit("./",[Path("e")]),Some(FilterPart(Pattern(Ref(ValueId("s"))))))
test walk extension s [[ walk ./e with extension s ]] parse to WalkPath(PathLit("./",[Path("e")]),Some(FilterPart(Extension(Ref(ValueId("s"))))))

test read absolute path literal [[ read /foo.txt ]] parse succeeds
test read relative path literal [[ read ./foo.txt ]] parse succeeds
test read variable [[ read file ]] parse succeeds
test read no layout between followed by slash [[ read/foo ]] parse fails
test read no layout between followed by period [[ read./foo ]] parse fails
test read no layout between followed by letter [[ readfile ]] parse to Ref(ValueId("readfile"))

test exists absolute path literal [[ exists /foo.txt ]] parse succeeds
test exists relative path literal [[ exists ./foo.txt ]] parse succeeds
test exists variable [[ exists file ]] parse succeeds
test exists no layout between followed by slash [[ exists/foo ]] parse fails
test exists no layout between followed by period [[ exists./foo ]] parse fails
test exists no layout between followed by letter [[ existsfile ]] parse to Ref(ValueId("existsfile"))

test return int literal [[ return 2 ]] parse succeeds
test return string literal [[ return "Successfully parsed $file" ]] parse succeeds
test return var [[ return generatedFile ]] parse succeeds
test return complex expression [[ return name != null && shouldInclude(name!) ]] parse succeeds
test return no layout between followed by double quote [[ return"parsing fails" ]] parse fails
test return no layout between followed by slash [[ return/foo ]] parse fails
test return no layout between followed by period [[ return./foo ]] parse fails
test return no layout between followed by open bracket in brackets [[ return(5) ]] // todo parse fails
test return no layout between followed by open bracket in tuple [[ return(5, 9) ]] // todo parse fails
test return no layout between followed by open square bracket in list literal [[ return[1, 2] ]] parse fails
test return no layout between followed by open square bracket in list comprehension [[ return[double(x) | x <- [1, 2, 3] ] ]] parse fails
test return no layout between followed by letter in variable [[ returnfile ]] parse to Ref(ValueId("returnfile"))
test return no layout between followed by letter in function [[ returnsomeFunc() ]] parse to Call(NoModuleList(), "returnsomeFunc", NoTypeArgs(), [])
test return no layout between followed by digit [[ return5 ]] parse to Ref(ValueId("return5"))
test return no layout between followed by underscore [[ return_foo ]] parse to Ref(ValueId("return_foo"))
test return no layout between followed by dash [[ return-5 ]] parse to Ref(ValueId("return-5"))
test return no layout between followed by exclamation mark [[ return!true ]] parse fails
test return no layout between followed by plus [[ return+5 ]] parse to Add(Ref(ValueId("return")), IntLit("5"))

test fail string literal [[ fail "No files to parse" ]] parse succeeds
test fail string interpolation [[ fail "Could not find '$file'" ]] parse succeeds
test fail no layout between followed by double quote [[ fail"it broke" ]] parse fails
test fail no layout between followed by slash [[ fail/foo ]] parse fails
test fail no layout between followed by period [[ fail./foo ]] parse fails
test fail no layout between followed by open bracket in brackets [[ fail(5) ]] // todo parse fails
test fail no layout between followed by open bracket in tuple [[ fail(5, 9) ]] // todo parse fails
test fail no layout between followed by open square bracket in list literal [[ fail[1, 2] ]] parse fails
test fail no layout between followed by open square bracket in list comprehension [[ fail[double(x) | x <- [1, 2, 3] ] ]] parse fails
test fail no layout between followed by letter in variable [[ failfile ]] parse to Ref(ValueId("failfile"))
test fail no layout between followed by letter in function [[ failsomeFunc() ]] parse to Call(NoModuleList(), "failsomeFunc", NoTypeArgs(), [])
test fail no layout between followed by letter in built-in [[ failread file ]] parse fails
test fail no layout between followed by digit [[ fail5 ]] parse to Ref(ValueId("fail5"))
test fail no layout between followed by underscore [[ fail_foo ]] parse to Ref(ValueId("fail_foo"))
test fail no layout between followed by dash [[ fail-5 ]] parse to Ref(ValueId("fail-5"))
test fail no layout between followed by exclamation mark [[ fail!true ]] parse fails
test fail no layout between followed by plus [[ fail+5 ]] parse to Add(Ref(ValueId("fail")), IntLit("5"))
