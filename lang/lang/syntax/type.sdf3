module type

imports

  lex/literal
  common

template options

  keyword -/- [a-zA-Z0-9\-\_]

context-free sorts

  Type
  UpperBound
  LowerBound
  TypeArgs
  DataTy
  NullableMarker

context-free syntax

  Type = [([Type])] {bracket}

  Type.UnitTy     = <unit>
  Type.BoolTy     = <bool>
  Type.IntTy      = <int>
  Type.StrTy      = <string>
  Type.PathTy     = <path>
  Type.TupleTy    = <(<{Type ", "}+>)>
  Type.ListTy     = <<Type>*>
  Type.SupplierTy = <supplier[<Type>]>

  TypeArgs.NoTypeArgs = <>
  TypeArgs.TypeArgs = <[<{Type ", "}*>]>

  DataTy.DataTy = <<ModuleList><TYPEID><TypeArgs>>
  Type = DataTy

  NullableMarker.NullableMarker = <?> // to allow warning on just question mark
  Type.NullableTy = <<Type><NullableMarker>>

  UpperBound.NoUpperBound = <>
  UpperBound.UpperBound = < : <Type>>

  LowerBound.NoLowerBound = <>
  LowerBound.LowerBound = < -: <Type>>

  Type.Wildcard = <_<UpperBound><LowerBound>>

context-free priorities

  // Solves ambiguity between single element tuples and brackets
  Type.TupleTy <1> .> {Type ","}+ = Type,

  // todo: causes bug where _? fails to parse. See https://slde.slack.com/archives/C7254SF60/p1623169709196400
  {
    Type.ListTy
    Type.NullableTy
  } > {
    Type.Wildcard
  }
